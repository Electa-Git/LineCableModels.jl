#!/bin/bash
set -euxo pipefail

# Pre-seed Julia's default environment for this Julia version (e.g. @v1.11)
# and install everything listed in binder/Project.toml (plus your local package).

julia -e '
using Pkg, TOML

# 1) Activate default env for the running Julia version
#    (@v#.# expands to ~/.julia/environments/v<major>.<minor>)
Pkg.activate("@v#.#")

# 2) Always dev the local repo (your unregistered package) into the default env
#    so `using LineCableModels` works from anywhere.
if isfile("Project.toml")
    try
        Pkg.develop(path=".")
    catch e
        @warn "Pkg.develop(path=\".\") failed; check repo root" exception=(e, catch_backtrace())
    end
end

# 3) Read declared deps from binder/Project.toml (fallback to root Project.toml)
projfile = isfile("binder/Project.toml") ? "binder/Project.toml" :
           (isfile("Project.toml") ? "Project.toml" : nothing)

deps = Dict{String,Any}()
if projfile !== nothing
    proj = TOML.parsefile(projfile)
    deps = get(proj, "deps", deps)
end

# 4) Add each dependency by name if it is not the local package we just devved.
for name in sort(collect(keys(deps)))
    if name == "LineCableModels"
        continue
    end
    try
        Pkg.add(name)
    catch e
        # If this dep exists as a subdir, try dev it; else warn.
        if isdir(name)
            @info "Pkg.add($name) failed, trying Pkg.develop(path=\"$name\")"
            try
                Pkg.develop(path=name)
            catch e2
                @warn "Could not add or dev dependency $name" exception=(e2, catch_backtrace())
            end
        else
            @warn "Could not add dependency $name (not found as a subdir)."
        end
    end
end

# 5) Precompile the default env so Pluto loads fast
Pkg.precompile()
'
