var documenterSearchIndex = {"docs":
[{"location":"tutorials/tutorial3/#Tutorial-3-Computing-line-parameters","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"","category":"section"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"This case file demonstrates how to model an armored high-voltage single-core power cable using the LineCableModels.jl package. The objective is to build a complete representation of a single-core 525 kV cable with a 1600 mm² copper conductor, 1.2 mm tubular lead sheath and 68 x 6 mm galvanized steel armor, based on the design described in [13].","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"Tutorial outline","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"Pages = [\n\t\"tutorial3.md\",\n]\nDepth = 2:3","category":"page"},{"location":"tutorials/tutorial3/#Introduction","page":"Tutorial 3 - Computing line parameters","title":"Introduction","text":"","category":"section"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"HVDC cables are constructed around a central conductor enclosed by a triple-extruded insulation system (inner/outer semi-conductive layers and main insulation). A metallic screen and protective outer sheath are then applied for land cables. Subsea designs add galvanized steel wire armor over this structure to provide mechanical strength against water pressure. A reference design for a 525 kV HVDC cable is shown here.","category":"page"},{"location":"tutorials/tutorial3/#Getting-started","page":"Tutorial 3 - Computing line parameters","title":"Getting started","text":"","category":"section"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"Load the package and set up the environment:","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"using DataFrames\nusing LineCableModels\nusing Printf\nfullfile(filename) = joinpath(@__DIR__, filename); #hide\nsetup_logging!(0); #hide\nnothing #hide","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"Initialize library and the required materials for this design:","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"materials = MaterialsLibrary(add_defaults=true)\nlead = Material(21.4e-8, 1.0, 0.999983, 20.0, 0.00400) # Lead or lead alloy\nadd!(materials, \"lead\", lead)\nsteel = Material(13.8e-8, 1.0, 300.0, 20.0, 0.00450) # Steel\nadd!(materials, \"steel\", steel)\npp = Material(1e15, 2.8, 1.0, 20.0, 0.0) # Laminated paper propylene\nadd!(materials, \"pp\", pp)","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"Inspect the contents of the materials library:","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"materials_df = DataFrame(materials)","category":"page"},{"location":"tutorials/tutorial3/#Cable-dimensions","page":"Tutorial 3 - Computing line parameters","title":"Cable dimensions","text":"","category":"section"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"The cable under consideration is a high-voltage, stranded copper conductor cable with XLPE insulation, water-blocking tape, lead tubular screens, PE inner sheath, PP bedding, steel armor and PP jacket, rated for 525 kV HVDC systems. This information is typically found in the cable datasheet and is based on the design studied in [13].","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"The cable is found to have the following configuration:","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"num_co_wires = 127 # number of core wires\nnum_ar_wires = 68  # number of armor wires\nd_core = 0.0463    # nominal core overall diameter\nd_w = 3.6649e-3    # nominal strand diameter of the core (minimum value to match datasheet)\nt_sc_in = 2e-3     # nominal internal semicon thickness\nt_ins = 26e-3      # nominal main insulation thickness\nt_sc_out = 1.8e-3  # nominal external semicon thickness\nt_wbt = .3e-3      # nominal thickness of the water blocking tape\nt_sc = 3.3e-3      # nominal lead screen thickness\nt_pe = 3e-3        # nominal PE inner sheath thickness\nt_bed = 3e-3       # nominal thickness of the PP bedding\nd_wa = 5.827e-3    # nominal armor wire diameter\nt_jac = 10e-3      # nominal PP jacket thickness\n\nd_overall = d_core #hide\nlayers = [] #hide\npush!(layers, (\"Conductor\", missing, d_overall * 1000)) #hide\nd_overall += 2 * t_sc_in #hide\npush!(layers, (\"Inner semiconductor\", t_sc_in * 1000, d_overall * 1000)) #hide\nd_overall += 2 * t_ins #hide\npush!(layers, (\"Main insulation\", t_ins * 1000, d_overall * 1000)) #hide\nd_overall += 2 * t_sc_out #hide\npush!(layers, (\"Outer semiconductor\", t_sc_out * 1000, d_overall * 1000)) #hide\nd_overall += 2 * t_wbt #hide\npush!(layers, (\"Swellable tape\", t_wbt * 1000, d_overall * 1000)) #hide\nd_overall += 2 * t_sc #hide\npush!(layers, (\"Lead screen\", t_sc * 1000, d_overall * 1000)) #hide\nd_overall += 2 * t_pe #hide\npush!(layers, (\"PE inner sheath\", t_pe * 1000, d_overall * 1000)) #hide\nd_overall += 2 * t_bed #hide\npush!(layers, (\"PP bedding\", t_bed * 1000, d_overall * 1000)) #hide\nd_overall += 2 * d_wa #hide\npush!(layers, (\"Stranded wire armor\", d_wa * 1000, d_overall * 1000)) #hide\nd_overall += 2 * t_jac #hide\npush!(layers, (\"PP jacket\", t_jac * 1000, d_overall * 1000)); #hide\nnothing #hide","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"The cable structure is summarized in a table for better visualization, with dimensions in milimiters:","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"df = DataFrame( #hide\n    layer=first.(layers), #hide\n    thickness=[ #hide\n        ismissing(t) ? \"-\" : round(t, sigdigits=2) for t in getindex.(layers, 2) #hide\n    ], #hide\n    diameter=[round(d, digits=2) for d in getindex.(layers, 3)], #hide\n) #hide","category":"page"},{"location":"tutorials/tutorial3/#Core-and-main-insulation","page":"Tutorial 3 - Computing line parameters","title":"Core and main insulation","text":"","category":"section"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"Initialize the conductor object and assign the central wire:","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"material = get(materials, \"copper\")\ncore = ConductorGroup(WireArray(0.0, Diameter(d_w), 1, 0.0, material))","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"Add the subsequent layers of wires and inspect the object:","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"n_strands = 6 # Strands per layer\nn_layers = 6 # Layers of strands\nfor i in 1:n_layers\n    add!(core, WireArray, Diameter(d_w), i * n_strands, 11.0, material)\nend\ncore","category":"page"},{"location":"tutorials/tutorial3/#Inner-semiconductor","page":"Tutorial 3 - Computing line parameters","title":"Inner semiconductor","text":"","category":"section"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"Inner semiconductor (1000 Ω.m as per IEC 840):","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"material = get(materials, \"semicon1\")\nmain_insu = InsulatorGroup(Semicon(core, Thickness(t_sc_in), material))","category":"page"},{"location":"tutorials/tutorial3/#Main-insulation","page":"Tutorial 3 - Computing line parameters","title":"Main insulation","text":"","category":"section"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"Add the insulation layer:","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"material = get(materials, \"pe\")\nadd!(main_insu, Insulator, Thickness(t_ins), material)","category":"page"},{"location":"tutorials/tutorial3/#Outer-semiconductor","page":"Tutorial 3 - Computing line parameters","title":"Outer semiconductor","text":"","category":"section"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"Outer semiconductor (500 Ω.m as per IEC 840):","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"material = get(materials, \"semicon2\")\nadd!(main_insu, Semicon, Thickness(t_sc_out), material)","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"Water blocking (swellable) tape:","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"material = get(materials, \"polyacrylate\")\nadd!(main_insu, Semicon, Thickness(t_wbt), material)","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"Group core-related components:","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"core_cc = CableComponent(\"core\", core, main_insu)\n\ncable_id = \"525kV_1600mm2\"\ndatasheet_info = NominalData(\n    designation_code=\"(N)2XH(F)RK2Y\",\n    U0=500.0,                        # Phase (pole)-to-ground voltage [kV]\n    U=525.0,                         # Phase (pole)-to-phase (pole) voltage [kV]\n    conductor_cross_section=1600.0,  # [mm²]\n    screen_cross_section=1000.0,     # [mm²]\n    resistance=nothing,              # DC resistance [Ω/km]\n    capacitance=nothing,             # Capacitance [μF/km]\n    inductance=nothing,              # Inductance in trifoil [mH/km]\n)\ncable_design = CableDesign(cable_id, core_cc, nominal_data=datasheet_info)","category":"page"},{"location":"tutorials/tutorial3/#Lead-screen/sheath","page":"Tutorial 3 - Computing line parameters","title":"Lead screen/sheath","text":"","category":"section"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"Build the wire screens on top of the previous layer:","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"material = get(materials, \"lead\")\nscreen_con = ConductorGroup(Tubular(main_insu, Thickness(t_sc), material))","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"PE inner sheath:","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"material = get(materials, \"pe\")\nscreen_insu = InsulatorGroup(Insulator(screen_con, Thickness(t_pe), material))","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"PP bedding:","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"material = get(materials, \"pp\")\nadd!(screen_insu, Insulator, Thickness(t_bed), material)","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"Group sheath components and assign to design:","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"sheath_cc = CableComponent(\"sheath\", screen_con, screen_insu)\nadd!(cable_design, sheath_cc)","category":"page"},{"location":"tutorials/tutorial3/#Armor-and-outer-jacket-components","page":"Tutorial 3 - Computing line parameters","title":"Armor and outer jacket components","text":"","category":"section"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"Add the armor wires on top of the previous layer:","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"lay_ratio = 10.0 # typical value for wire screens\nmaterial = get(materials, \"steel\")\narmor_con = ConductorGroup(\n    WireArray(screen_insu, Diameter(d_wa), num_ar_wires, lay_ratio, material))","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"PP layer after armor:","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"material = get(materials, \"pp\")\narmor_insu = InsulatorGroup(Insulator(armor_con, Thickness(t_jac), material))","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"Assign the armor parts directly to the design:","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"add!(cable_design, \"armor\", armor_con, armor_insu)","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"Inspect the finished cable design:","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"plt3 = preview(cable_design)","category":"page"},{"location":"tutorials/tutorial3/#Examining-the-cable-parameters-(RLC)","page":"Tutorial 3 - Computing line parameters","title":"Examining the cable parameters (RLC)","text":"","category":"section"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"Summarize DC lumped parameters (R, L, C):","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"core_df = DataFrame(cable_design, :baseparams)","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"Obtain the equivalent electromagnetic properties of the cable:","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"components_df = DataFrame(cable_design, :components)","category":"page"},{"location":"tutorials/tutorial3/#Saving-the-cable-design","page":"Tutorial 3 - Computing line parameters","title":"Saving the cable design","text":"","category":"section"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"Load an existing CablesLibrary file or create a new one:","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"library = CablesLibrary()\nlibrary_file = fullfile(\"cables_library.json\")\nload!(library, file_name=library_file)\nadd!(library, cable_design)\nlibrary_df = DataFrame(library)","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"Save to file for later use:","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"save(library, file_name=library_file);\nnothing #hide","category":"page"},{"location":"tutorials/tutorial3/#Defining-a-cable-system","page":"Tutorial 3 - Computing line parameters","title":"Defining a cable system","text":"","category":"section"},{"location":"tutorials/tutorial3/#Earth-model","page":"Tutorial 3 - Computing line parameters","title":"Earth model","text":"","category":"section"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"Define a constant frequency earth model:","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"f = 1e-3 # Near DC frequency for the analysis\nearth_params = EarthModel([f], 100.0, 10.0, 1.0)  # 100 Ω·m resistivity, εr=10, μr=1","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"Earth model base (DC) properties:","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"earthmodel_df = DataFrame(earth_params)","category":"page"},{"location":"tutorials/tutorial3/#Underground-bipole-configuration","page":"Tutorial 3 - Computing line parameters","title":"Underground bipole configuration","text":"","category":"section"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"Define the coordinates for both cables:","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"xp, xn, y0 = -0.5, 0.5, -1.0;\nnothing #hide","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"Initialize the LineCableSystem with positive pole:","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"cablepos = CablePosition(cable_design, xp, y0,\n    Dict(\"core\" => 1, \"sheath\" => 0, \"armor\" => 0))\ncable_system = LineCableSystem(\"525kV_1600mm2_bipole\", 1000.0, cablepos)","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"Add the other pole (negative) to the system:","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"add!(cable_system, cable_design, xn, y0,\n    Dict(\"core\" => 2, \"sheath\" => 0, \"armor\" => 0))","category":"page"},{"location":"tutorials/tutorial3/#Cable-system-preview","page":"Tutorial 3 - Computing line parameters","title":"Cable system preview","text":"","category":"section"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"In this section the complete bipole cable system is examined.","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"Display system details:","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"system_df = DataFrame(cable_system)","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"Visualize the cross-section of the three-phase system:","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"plt4 = preview(cable_system, zoom_factor=0.15)","category":"page"},{"location":"tutorials/tutorial3/#PSCAD-export","page":"Tutorial 3 - Computing line parameters","title":"PSCAD export","text":"","category":"section"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"This step showcases how to export the model for electromagnetic transient simulations in PSCAD.","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"Export to PSCAD input file:","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"output_file = fullfile(\"$(cable_system.system_id)_export.pscx\")\nexport_file = export_data(:pscad, cable_system, earth_params, file_name=output_file);\nnothing #hide","category":"page"},{"location":"tutorials/tutorial3/#FEM-calculations","page":"Tutorial 3 - Computing line parameters","title":"FEM calculations","text":"","category":"section"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"Define a LineParametersProblem with the cable system and earth model","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"problem = LineParametersProblem(\n    cable_system,\n    temperature=20.0,  # Operating temperature\n    earth_props=earth_params,\n    frequencies=[f],   # Frequency for the analysis\n);\nnothing #hide","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"Estimate domain size based on skin depth in the earth","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"domain_radius = calc_domain_size(earth_params, [f]);\nnothing #hide","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"Define custom mesh transitions around each cable","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"mesh_transition1 = MeshTransition(\n    cable_system,\n    [1],\n    r_min=0.08,\n    r_length=0.25,\n    mesh_factor_min=0.01 / (domain_radius / 5),\n    mesh_factor_max=0.25 / (domain_radius / 5),\n    n_regions=5)\n\nmesh_transition2 = MeshTransition(\n    cable_system,\n    [2],\n    r_min=0.08,\n    r_length=0.25,\n    mesh_factor_min=0.01 / (domain_radius / 5),\n    mesh_factor_max=0.25 / (domain_radius / 5),\n    n_regions=5);\nnothing #hide","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"Define runtime options","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"opts = (\n    force_remesh=true,                # Force remeshing\n    force_overwrite=true,             # Overwrite existing files\n    plot_field_maps=false,            # Do not compute/ plot field maps\n    mesh_only=false,                  # Preview the mesh\n    save_path=fullfile(\"fem_output\"), # Results directory\n    keep_run_files=true,              # Archive files after each run\n    verbosity=0,                      # Verbosity\n);\nnothing #hide","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"Define the FEM formulation with the specified parameters","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"formulation = FormulationSet(:FEM,\n    impedance=Darwin(),\n    admittance=Electrodynamics(),\n    domain_radius=domain_radius,\n    domain_radius_inf=domain_radius * 1.25,\n    elements_per_length_conductor=1,\n    elements_per_length_insulator=2,\n    elements_per_length_semicon=1,\n    elements_per_length_interfaces=5,\n    points_per_circumference=16,\n    mesh_size_min=1e-6,\n    mesh_size_max=domain_radius / 5,\n    mesh_transitions=[mesh_transition1,\n        mesh_transition2],\n    mesh_size_default=domain_radius / 10,\n    mesh_algorithm=5,\n    mesh_max_retries=20,\n    materials=materials,\n    options=opts\n);\nnothing #hide","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"Run the FEM model","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"@time workspace, line_params = compute!(problem, formulation);\nnothing #hide","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"Display primary core results","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"if !opts.mesh_only\n    Z = line_params.Z[1, 1, 1]\n    Y = line_params.Y[1, 1, 1]\n    R = real(Z) * 1000\n    L = imag(Z) / (2π * f) * 1e6\n    C = imag(Y) / (2π * f) * 1e9\n    println(\"R = $(@sprintf(\"%.6g\", R)) Ω/km\")\n    println(\"L = $(@sprintf(\"%.6g\", L)) mH/km\")\n    println(\"C = $(@sprintf(\"%.6g\", C)) μF/km\")\nend","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"","category":"page"},{"location":"tutorials/tutorial3/","page":"Tutorial 3 - Computing line parameters","title":"Tutorial 3 - Computing line parameters","text":"🏠 Back to Tutorials","category":"page"},{"location":"CHANGELOG/#Changelog","page":"Changelog","title":"Changelog","text":"","category":"section"},{"location":"CHANGELOG/","page":"Changelog","title":"Changelog","text":"All notable changes to this project will be documented in this file.","category":"page"},{"location":"CHANGELOG/","page":"Changelog","title":"Changelog","text":"The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.","category":"page"},{"location":"CHANGELOG/#[Unreleased]","page":"Changelog","title":"[Unreleased]","text":"","category":"section"},{"location":"CHANGELOG/","page":"Changelog","title":"Changelog","text":"/","category":"page"},{"location":"CHANGELOG/#Changed","page":"Changelog","title":"Changed","text":"","category":"section"},{"location":"CHANGELOG/","page":"Changelog","title":"Changelog","text":"Refactored CodeComponent structure and constructors.","category":"page"},{"location":"CHANGELOG/#Added","page":"Changelog","title":"Added","text":"","category":"section"},{"location":"CHANGELOG/","page":"Changelog","title":"Changelog","text":"Included interface to run finite element simulations using Onelab.\nIncluded basic coverage tests.\nIncluded import/export of CableDesigns to JSON files.","category":"page"},{"location":"CHANGELOG/#[v0.1.0](https://github.com/Electa-Git/LineCableModels.jl/releases/tag/v0.1.0)-2025-03-29","page":"Changelog","title":"v0.1.0 - 2025-03-29","text":"","category":"section"},{"location":"CHANGELOG/#Added-2","page":"Changelog","title":"Added","text":"","category":"section"},{"location":"CHANGELOG/","page":"Changelog","title":"Changelog","text":"First release. See README.md for more details.","category":"page"},{"location":"CHANGELOG/","page":"Changelog","title":"Changelog","text":"[Unreleased]: https://github.com/Electa-Git/LineCableModels.jl/compare/v0.1.0...HEAD v0.1.0: https://github.com/Electa-Git/LineCableModels.jl/releases/tag/v0.1.0","category":"page"},{"location":"tutorials/#Tutorials","page":"Contents","title":"Tutorials","text":"","category":"section"},{"location":"tutorials/","page":"Contents","title":"Contents","text":"In this section you will find step-by-step guides to help you get started with the LineCableModels.jl package. These guides are designed to be straightforward and practical, covering the most common use cases and features. ","category":"page"},{"location":"tutorials/","page":"Contents","title":"Contents","text":"Pages = Main.tutorial_pages\nDepth = 1","category":"page"},{"location":"TODO/#TODO-for-LineCableModels.jl","page":"TODO","title":"TODO for LineCableModels.jl","text":"","category":"section"},{"location":"TODO/","page":"TODO","title":"TODO","text":"This is a living document intended to track scientific development priorities and research directions for new features, methods and solutions to be included in the package.","category":"page"},{"location":"TODO/","page":"TODO","title":"TODO","text":"For bugs, features and implementation taks, the Issues page is used.","category":"page"},{"location":"TODO/#Wishlist","page":"TODO","title":"Wishlist","text":"","category":"section"},{"location":"TODO/","page":"TODO","title":"TODO","text":"[ ] Pipe-type cables and MoM-SO implementation.","category":"page"},{"location":"TODO/#In-progress","page":"TODO","title":"In progress","text":"","category":"section"},{"location":"TODO/","page":"TODO","title":"TODO","text":"[ ] Implementation of frequency-dependent soil properties.\n[ ] Development of novel formulations for cables composed of N concentrical layers, allowing for accurate representations of semiconductor materials.\n[ ] Implementation of an interface to run finite element simulations using Onelab.","category":"page"},{"location":"TODO/#Done","page":"TODO","title":"Done ✓","text":"","category":"section"},{"location":"TODO/","page":"TODO","title":"TODO","text":"[x] Object-oriented data model for cables, conductors, insulations and materials.","category":"page"},{"location":"tutorials/tutorial1/#Tutorial-1-Using-the-materials-library","page":"Tutorial 1 - Using the  materials library","title":"Tutorial 1 - Using the  materials library","text":"","category":"section"},{"location":"tutorials/tutorial1/","page":"Tutorial 1 - Using the  materials library","title":"Tutorial 1 - Using the  materials library","text":"This tutorial demonstrates how to manage material properties for power cable modeling using the package LineCableModels.jl. Accurate knowledge of electromagnetic properties is essential for reliable cable design and analysis.","category":"page"},{"location":"tutorials/tutorial1/","page":"Tutorial 1 - Using the  materials library","title":"Tutorial 1 - Using the  materials library","text":"Beyond showcasing the API, this guide serves as a practical reference by providing standard property values from recognized industry sources like CIGRE TB-531 [8] and IEC 60287 [9] that can be stored and consistently applied across multiple design iterations and simulation studies.","category":"page"},{"location":"tutorials/tutorial1/","page":"Tutorial 1 - Using the  materials library","title":"Tutorial 1 - Using the  materials library","text":"Tutorial outline","category":"page"},{"location":"tutorials/tutorial1/","page":"Tutorial 1 - Using the  materials library","title":"Tutorial 1 - Using the  materials library","text":"Pages = [\n\t\"tutorial1.md\",\n]\nDepth = 2:3","category":"page"},{"location":"tutorials/tutorial1/#Getting-started","page":"Tutorial 1 - Using the  materials library","title":"Getting started","text":"","category":"section"},{"location":"tutorials/tutorial1/","page":"Tutorial 1 - Using the  materials library","title":"Tutorial 1 - Using the  materials library","text":"Load the package:","category":"page"},{"location":"tutorials/tutorial1/","page":"Tutorial 1 - Using the  materials library","title":"Tutorial 1 - Using the  materials library","text":"using DataFrames\nusing LineCableModels\nfullfile(filename) = joinpath(@__DIR__, filename); #hide\nsetup_logging!(0); #hide\nnothing #hide","category":"page"},{"location":"tutorials/tutorial1/","page":"Tutorial 1 - Using the  materials library","title":"Tutorial 1 - Using the  materials library","text":"The MaterialsLibrary is a container for storing electromagnetic properties of different materials used in power cables. By default, it initializes with several common materials with their standard properties.","category":"page"},{"location":"tutorials/tutorial1/","page":"Tutorial 1 - Using the  materials library","title":"Tutorial 1 - Using the  materials library","text":"Initialize a MaterialsLibrary with default values:","category":"page"},{"location":"tutorials/tutorial1/","page":"Tutorial 1 - Using the  materials library","title":"Tutorial 1 - Using the  materials library","text":"materials = MaterialsLibrary()","category":"page"},{"location":"tutorials/tutorial1/","page":"Tutorial 1 - Using the  materials library","title":"Tutorial 1 - Using the  materials library","text":"Inspect the contents of the materials library:","category":"page"},{"location":"tutorials/tutorial1/","page":"Tutorial 1 - Using the  materials library","title":"Tutorial 1 - Using the  materials library","text":"materials_df = DataFrame(materials)","category":"page"},{"location":"tutorials/tutorial1/","page":"Tutorial 1 - Using the  materials library","title":"Tutorial 1 - Using the  materials library","text":"The function DataFrame returns a DataFrame with all materials and their properties, namely: electrical resistivity, relative permittivity, relative permeability, reference temperature, and temperature coefficient.","category":"page"},{"location":"tutorials/tutorial1/#Adding-new-materials","page":"Tutorial 1 - Using the  materials library","title":"Adding new materials","text":"","category":"section"},{"location":"tutorials/tutorial1/","page":"Tutorial 1 - Using the  materials library","title":"Tutorial 1 - Using the  materials library","text":"note: Note\nNew materials can be added to the library using the Material constructor followed by add!.","category":"page"},{"location":"tutorials/tutorial1/","page":"Tutorial 1 - Using the  materials library","title":"Tutorial 1 - Using the  materials library","text":"It might be useful to add other conductor materials with corrected properties based on recognized standards [8] [9].","category":"page"},{"location":"tutorials/tutorial1/","page":"Tutorial 1 - Using the  materials library","title":"Tutorial 1 - Using the  materials library","text":"copper_corrected = Material(1.835e-8, 1.0, 0.999994, 20.0, 0.00393) # Copper with corrected resistivity from IEC 60287-3-2\nadd!(materials, \"copper_corrected\", copper_corrected)\naluminum_corrected = Material(3.03e-8, 1.0, 0.999994, 20.0, 0.00403) # Aluminum with corrected resistivity from IEC 60287-3-2\nadd!(materials, \"aluminum_corrected\", aluminum_corrected)\nlead = Material(21.4e-8, 1.0, 0.999983, 20.0, 0.00400) # Lead or lead alloy\nadd!(materials, \"lead\", lead)\nsteel = Material(13.8e-8, 1.0, 300.0, 20.0, 0.00450) # Steel\nadd!(materials, \"steel\", steel)\nbronze = Material(3.5e-8, 1.0, 1.0, 20.0, 0.00300) # Bronze\nadd!(materials, \"bronze\", bronze)\nstainless_steel = Material(70.0e-8, 1.0, 500.0, 20.0, 0.0) # Stainless steel\nadd!(materials, \"stainless_steel\", stainless_steel)","category":"page"},{"location":"tutorials/tutorial1/","page":"Tutorial 1 - Using the  materials library","title":"Tutorial 1 - Using the  materials library","text":"When modeling cables for EMT analysis, one might be concerned with the impact of insulators and semiconductive layers on cable constants. Common insulation materials and semicons with different dielectric properties are reported in Table 6 of [8]. Let us include some of these materials in the MaterialsLibrary to help our future selves.","category":"page"},{"location":"tutorials/tutorial1/","page":"Tutorial 1 - Using the  materials library","title":"Tutorial 1 - Using the  materials library","text":"epr = Material(1e15, 3.0, 1.0, 20.0, 0.005) # EPR (ethylene propylene rubber)\nadd!(materials, \"epr\", epr)\npvc = Material(1e15, 8.0, 1.0, 20.0, 0.1) # PVC (polyvinyl chloride)\nadd!(materials, \"pvc\", pvc)\nlaminated_paper = Material(1e15, 2.8, 1.0, 20.0, 0.0) # Laminated paper propylene\nadd!(materials, \"laminated_paper\", laminated_paper)\ncarbon_pe = Material(0.06, 1e3, 1.0, 20.0, 0.0) # Carbon-polyethylene compound (semicon)\nadd!(materials, \"carbon_pe\", carbon_pe)\nconductive_paper = Material(18.5, 8.6, 1.0, 20.0, 0.0) # Conductive paper layer (semicon)\nadd!(materials, \"conductive_paper\", conductive_paper)","category":"page"},{"location":"tutorials/tutorial1/#Removing-materials","page":"Tutorial 1 - Using the  materials library","title":"Removing materials","text":"","category":"section"},{"location":"tutorials/tutorial1/","page":"Tutorial 1 - Using the  materials library","title":"Tutorial 1 - Using the  materials library","text":"note: Note\nMaterials can be removed from the library with the delete! function.","category":"page"},{"location":"tutorials/tutorial1/","page":"Tutorial 1 - Using the  materials library","title":"Tutorial 1 - Using the  materials library","text":"Add a duplicate material by accident:","category":"page"},{"location":"tutorials/tutorial1/","page":"Tutorial 1 - Using the  materials library","title":"Tutorial 1 - Using the  materials library","text":"add!(materials, \"epr_dupe\", epr)","category":"page"},{"location":"tutorials/tutorial1/","page":"Tutorial 1 - Using the  materials library","title":"Tutorial 1 - Using the  materials library","text":"And now remove it using the delete! function:","category":"page"},{"location":"tutorials/tutorial1/","page":"Tutorial 1 - Using the  materials library","title":"Tutorial 1 - Using the  materials library","text":"delete!(materials, \"epr_dupe\")","category":"page"},{"location":"tutorials/tutorial1/","page":"Tutorial 1 - Using the  materials library","title":"Tutorial 1 - Using the  materials library","text":"Examine the updated library after removing the duplicate:","category":"page"},{"location":"tutorials/tutorial1/","page":"Tutorial 1 - Using the  materials library","title":"Tutorial 1 - Using the  materials library","text":"println(\"Material properties compiled from CIGRE TB-531 and IEC 60287:\")\nmaterials_df = DataFrame(materials)","category":"page"},{"location":"tutorials/tutorial1/#Saving-the-materials-library-to-JSON","page":"Tutorial 1 - Using the  materials library","title":"Saving the materials library to JSON","text":"","category":"section"},{"location":"tutorials/tutorial1/","page":"Tutorial 1 - Using the  materials library","title":"Tutorial 1 - Using the  materials library","text":"output_file = fullfile(\"materials_library.json\")\nsave(materials, file_name=output_file);\nnothing #hide","category":"page"},{"location":"tutorials/tutorial1/#Retrieving-materials-for-use","page":"Tutorial 1 - Using the  materials library","title":"Retrieving materials for use","text":"","category":"section"},{"location":"tutorials/tutorial1/","page":"Tutorial 1 - Using the  materials library","title":"Tutorial 1 - Using the  materials library","text":"note: Note\nTo load from an existing JSON file, instantiate a new MaterialsLibrary followed by a call to the load! method. Materials can be retrieved from the library using the get function.","category":"page"},{"location":"tutorials/tutorial1/","page":"Tutorial 1 - Using the  materials library","title":"Tutorial 1 - Using the  materials library","text":"Initialize a new MaterialsLibrary and load from the JSON file:","category":"page"},{"location":"tutorials/tutorial1/","page":"Tutorial 1 - Using the  materials library","title":"Tutorial 1 - Using the  materials library","text":"materials_from_json = MaterialsLibrary()\nload!(materials_from_json, file_name=output_file)","category":"page"},{"location":"tutorials/tutorial1/","page":"Tutorial 1 - Using the  materials library","title":"Tutorial 1 - Using the  materials library","text":"Retrieve a material and display the object:","category":"page"},{"location":"tutorials/tutorial1/","page":"Tutorial 1 - Using the  materials library","title":"Tutorial 1 - Using the  materials library","text":"copper = get(materials_from_json, \"copper_corrected\")","category":"page"},{"location":"tutorials/tutorial1/","page":"Tutorial 1 - Using the  materials library","title":"Tutorial 1 - Using the  materials library","text":"Access the material properties:","category":"page"},{"location":"tutorials/tutorial1/","page":"Tutorial 1 - Using the  materials library","title":"Tutorial 1 - Using the  materials library","text":"println(\"Retrieved copper_corrected material properties:\")\nprintln(\"Resistivity: $(copper.rho) Ω·m\")\nprintln(\"Relative permittivity: $(copper.eps_r)\")\nprintln(\"Relative permeability: $(copper.mu_r)\")\nprintln(\"Reference temperature: $(copper.T0) °C\")\nprintln(\"Temperature coefficient: $(copper.alpha) 1/°C\")","category":"page"},{"location":"tutorials/tutorial1/#Conclusion","page":"Tutorial 1 - Using the  materials library","title":"Conclusion","text":"","category":"section"},{"location":"tutorials/tutorial1/","page":"Tutorial 1 - Using the  materials library","title":"Tutorial 1 - Using the  materials library","text":"This tutorial has demonstrated how to:","category":"page"},{"location":"tutorials/tutorial1/","page":"Tutorial 1 - Using the  materials library","title":"Tutorial 1 - Using the  materials library","text":"Initialize a MaterialsLibrary with default Material objects.\nAdd new materials with specific properties.\nRemove duplicate materials.\nSave the library to a file for future use.\nRetrieve materials for use in cable modeling.","category":"page"},{"location":"tutorials/tutorial1/","page":"Tutorial 1 - Using the  materials library","title":"Tutorial 1 - Using the  materials library","text":"The MaterialsLibrary provides a flexible and traceable framework to manage material properties for accurate power cable modeling. Custom Material objects can be defined and used to match specific manufacturer data or standards requirements.","category":"page"},{"location":"tutorials/tutorial1/","page":"Tutorial 1 - Using the  materials library","title":"Tutorial 1 - Using the  materials library","text":"","category":"page"},{"location":"tutorials/tutorial1/","page":"Tutorial 1 - Using the  materials library","title":"Tutorial 1 - Using the  materials library","text":"🏠 Back to Tutorials","category":"page"},{"location":"reference/#Toolbox-reference","page":"Toolbox reference","title":"Toolbox reference","text":"","category":"section"},{"location":"reference/","page":"Toolbox reference","title":"Toolbox reference","text":"This page provides a comprehensive API reference for the LineCableModels.jl package. It documents all public modules, types, functions, and constants, organized by functional area. Each section corresponds to a major module in the package, with detailed information about parameters, return values, and usage examples.","category":"page"},{"location":"reference/#Contents","page":"Toolbox reference","title":"Contents","text":"","category":"section"},{"location":"reference/","page":"Toolbox reference","title":"Toolbox reference","text":"Pages = [\"reference.md\"]\nDepth = 3","category":"page"},{"location":"reference/","page":"Toolbox reference","title":"Toolbox reference","text":"","category":"page"},{"location":"reference/#Data-model","page":"Toolbox reference","title":"Data model","text":"","category":"section"},{"location":"reference/#LineCableModels.DataModel","page":"Toolbox reference","title":"LineCableModels.DataModel","text":"LineCableModels.DataModel\n\nThe DataModel module provides data structures, constructors and utilities for modeling power cables within the LineCableModels.jl package. This module includes definitions for various cable components, and visualization tools for cable designs.\n\nOverview\n\nProvides objects for detailed cable modeling with the CableDesign and supporting types: WireArray, Strip, Tubular, Semicon, and Insulator.\nIncludes objects for cable system modeling with the LineCableSystem type, and multiple formation patterns like trifoil and flat arrangements.\nContains functions for calculating the base electric properties of all elements within a CableDesign, namely: resistance, inductance (via GMR), shunt capacitance, and shunt conductance (via loss factor).\nOffers visualization tools for previewing cable cross-sections and system layouts.\nProvides a library system for storing and retrieving cable designs.\n\nDependencies\n\nBase\nColors\nCore\nDataFrames\nDocStringExtensions\nForceImport\nLineCableModels\nLineCableModels.DataModel.BaseParams\nLineCableModels.EarthProps\nLineCableModels.Materials\nLineCableModels.Utils\nMeasurements\nPlots\nReexport\n\nExports\n\nBaseParams\nCableComponent\nCableDesign\nCablePosition\nCablesLibrary\nConductorGroup\nDataFrame\nDiameter\nInsulator\nInsulatorGroup\nLineCableSystem\nNominalData\nSemicon\nStrip\nThickness\nTubular\nWireArray\nadd!\ncalc_equivalent_alpha\ncalc_equivalent_eps\ncalc_equivalent_gmr\ncalc_equivalent_lossfact\ncalc_equivalent_mu\ncalc_equivalent_rho\ncalc_gmd\ncalc_helical_params\ncalc_inductance_trifoil\ncalc_parallel_equivalent\ncalc_shunt_capacitance\ncalc_shunt_conductance\ncalc_sigma_lossfact\ncalc_solenoid_correction\ncalc_strip_resistance\ncalc_temperature_correction\ncalc_tubular_gmr\ncalc_tubular_inductance\ncalc_tubular_resistance\ncalc_wirearray_coords\ncalc_wirearray_gmr\ndelete!\nflat_formation\nget\ngetindex\nhaskey\niterate\nkeys\nlength\npreview\nsetindex!\ntrifoil_formation\nvalues\n\n\n\n\n\n","category":"module"},{"location":"reference/#DataFrames.DataFrame","page":"Toolbox reference","title":"DataFrames.DataFrame","text":"DataFrame(design::CableDesign; ...) -> DataFrame\nDataFrame(\n    design::CableDesign,\n    format::Symbol;\n    S,\n    rho_e\n) -> DataFrame\n\n\nExtracts and displays data from a CableDesign.\n\nArguments\n\ndesign: A CableDesign object to extract data from.\nformat: Symbol indicating the level of detail:\n:baseparams: Basic RLC parameters with nominal value comparison (default).\n:components: Component-level equivalent properties.\n:detailed: Individual cable part properties with layer-by-layer breakdown.\nS: Separation distance between cables [m] (only used for :baseparams format). Default: outermost cable diameter.\nrho_e: Resistivity of the earth [Ω·m] (only used for :baseparams format). Default: 100.\n\nReturns\n\nA DataFrame containing the requested cable data in the specified format.\n\nExamples\n\n# Get basic RLC parameters\ndata = DataFrame(design)  # Default is :baseparams format\n\n# Get component-level data\ncomp_data = DataFrame(design, :components)\n\n# Get detailed part-by-part breakdown\ndetailed_data = DataFrame(design, :detailed)\n\n# Specify earth parameters for core calculations\ncore_data = DataFrame(design, :baseparams, S=0.5, rho_e=150)\n\nSee also\n\nCableDesign\ncalc_tubular_resistance\ncalc_inductance_trifoil\ncalc_shunt_capacitance\n\n\n\n\n\n","category":"type"},{"location":"reference/#DataFrames.DataFrame-Tuple{CablesLibrary}","page":"Toolbox reference","title":"DataFrames.DataFrame","text":"DataFrame(library::CablesLibrary) -> DataFrame\n\n\nLists the cable designs in a CablesLibrary object as a DataFrame.\n\nArguments\n\nlibrary: An instance of CablesLibrary whose cable designs are to be displayed.\n\nReturns\n\nA DataFrame object with the following columns:\ncable_id: The unique identifier for each cable design.\nnominal_data: A string representation of the nominal data for each cable design.\ncomponents: A comma-separated string listing the components of each cable design.\n\nExamples\n\nlibrary = CablesLibrary()\ndesign1 = CableDesign(\"example1\", nominal_data=NominalData(...), components=Dict(\"A\"=>...))\ndesign2 = CableDesign(\"example2\", nominal_data=NominalData(...), components=Dict(\"C\"=>...))\nadd!(library, design1)\nadd!(library, design2)\n\n# Display the library as a DataFrame\ndf = DataFrame(library)\nfirst(df, 5)  # Show the first 5 rows of the DataFrame\n\nSee also\n\nCablesLibrary\nCableDesign\nadd!\n\n\n\n\n\n","category":"method"},{"location":"reference/#DataFrames.DataFrame-Tuple{LineCableSystem}","page":"Toolbox reference","title":"DataFrames.DataFrame","text":"DataFrame(system::LineCableSystem) -> DataFrame\n\n\nGenerates a summary DataFrame for cable positions and phase mappings within a LineCableSystem.\n\nArguments\n\nsystem: A LineCableSystem object containing the cable definitions and their configurations.\n\nReturns\n\nA DataFrame containing:\ncable_id: Identifier of each cable design.\nhorz: Horizontal coordinate of each cable [m].\nvert: Vertical coordinate of each cable [m].\nphase_mapping: Human-readable string representation mapping each cable component to its assigned phase.\n\nExamples\n\ndf = DataFrame(cable_system)\nprintln(df)\n# Output:\n# │ cable_id   │ horz │ vert  │ phase_mapping           │\n# │------------│------│-------│-------------------------│\n# │ \"Cable1\"   │ 0.0  │ -0.5  │ core: 1, sheath: 0      │\n# │ \"Cable2\"   │ 0.35 │ -1.25 │ core: 2, sheath: 0      │\n\nSee also\n\nLineCableSystem\nCablePosition\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.DataModel.CableComponent","page":"Toolbox reference","title":"LineCableModels.DataModel.CableComponent","text":"mutable struct CableComponent\n\nRepresents a CableComponent, i.e. a group of AbstractCablePart objects, with the equivalent geometric and material properties:\n\nid::String: Cable component identification (e.g. core/sheath/armor).\nconductor_group::ConductorGroup: The conductor group containing all conductive parts.\nconductor_props::Material: Effective properties of the equivalent coaxial conductor.\ninsulator_group::InsulatorGroup: The insulator group containing all insulating parts.\ninsulator_props::Material: Effective properties of the equivalent coaxial insulator.\n\ninfo: Definition & application\nCable components operate as containers for multiple cable parts, allowing the calculation of effective electromagnetic (EM) properties (sigma varepsilon mu). This is performed by transforming the physical objects within the CableComponent into one equivalent coaxial homogeneous structure comprised of one conductor and one insulator, each one represented by effective Material types stored in conductor_props and insulator_props fields.The effective properties approach is widely adopted in EMT-type simulations, and involves locking the internal and external radii of the conductor and insulator parts, respectively, and calculating the equivalent EM properties in order to match the previously determined values of R, L, C and G [4] [14].In applications, the CableComponent type is mapped to the main cable structures described in manufacturer datasheets, e.g., core, sheath, armor and jacket.\n\n\n\n\n\n","category":"type"},{"location":"reference/#LineCableModels.DataModel.CableComponent-Tuple{String, ConductorGroup, InsulatorGroup}","page":"Toolbox reference","title":"LineCableModels.DataModel.CableComponent","text":"CableComponent(\n    id::String,\n    conductor_group::ConductorGroup,\n    insulator_group::InsulatorGroup\n) -> CableComponent\n\n\nInitializes a CableComponent object based on its constituent conductor and insulator groups. The constructor performs the following sequence of steps:\n\nValidate that the conductor and insulator groups have matching radii at their interface.\nObtain the lumped-parameter values (R, L, C, G) from the conductor and insulator groups, which are computed within their respective constructors.\nCalculate the correction factors and equivalent electromagnetic properties of the conductor and insulator groups:\n\nQuantity Symbol Function\nResistivity (conductor) rho_con calc_equivalent_rho\nPermeability (conductor) mu_con calc_equivalent_mu\nResistivity (insulator) rho_ins calc_sigma_lossfact\nPermittivity (insulation) varepsilon_ins calc_equivalent_eps\nPermeability (insulation) mu_ins calc_solenoid_correction\n\nArguments\n\nid: Cable component identification (e.g. core/sheath/armor).\nconductor_group: The conductor group containing all conductive parts.\ninsulator_group: The insulator group containing all insulating parts.\n\nReturns\n\nA CableComponent instance with calculated equivalent properties.\n\nExamples\n\nconductor_group = ConductorGroup(...)\ninsulator_group = InsulatorGroup(...)\ncable = CableComponent(\"component_id\", conductor_group, insulator_group)  # Create cable component with base parameters @ 50 Hz\n\nSee also\n\ncalc_equivalent_rho\ncalc_equivalent_mu\ncalc_equivalent_eps\ncalc_sigma_lossfact\ncalc_solenoid_correction\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.DataModel.CableDesign","page":"Toolbox reference","title":"LineCableModels.DataModel.CableDesign","text":"mutable struct CableDesign\n\nRepresents the design of a cable, including its unique identifier, nominal data, and components.\n\ncable_id::String: Unique identifier for the cable design.\nnominal_data::NominalData: Informative reference data.\ncomponents::Vector{CableComponent}: Vector of cable components.\n\n\n\n\n\n","category":"type"},{"location":"reference/#LineCableModels.DataModel.CableDesign-Tuple{String, CableComponent}","page":"Toolbox reference","title":"LineCableModels.DataModel.CableDesign","text":"CableDesign(\n    cable_id::String,\n    component::CableComponent;\n    nominal_data\n) -> CableDesign\n\n\nConstructs a CableDesign instance.\n\nArguments\n\ncable_id: Unique identifier for the cable design.\ncomponent: Initial CableComponent for the design.\nnominal_data: Reference data for the cable design. Default: NominalData().\n\nReturns\n\nA CableDesign object with the specified properties.\n\nExamples\n\nconductor_group = ConductorGroup(central_conductor)\ninsulator_group = InsulatorGroup(main_insulator)\ncomponent = CableComponent(conductor_group, insulator_group)\ndesign = CableDesign(\"example\", component)\n\nSee also\n\nCableComponent\nConductorGroup\nInsulatorGroup\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.DataModel.CableDesign-Tuple{String, ConductorGroup, InsulatorGroup}","page":"Toolbox reference","title":"LineCableModels.DataModel.CableDesign","text":"CableDesign(\n    cable_id::String,\n    conductor_group::ConductorGroup,\n    insulator_group::InsulatorGroup;\n    component_id,\n    nominal_data\n)\n\n\nConstructs a CableDesign instance from conductor and insulator groups.\n\nArguments\n\ncable_id: Unique identifier for the cable design.\nconductor_group: The ConductorGroup for the component.\ninsulator_group: The InsulatorGroup for the component.\ncomponent_id: ID for the cable component. Default: \"core\".\nnominal_data: Reference data for the cable design. Default: NominalData().\n\nReturns\n\nA CableDesign object with the specified properties.\n\nExamples\n\nconductor_group = ConductorGroup(central_conductor)\ninsulator_group = InsulatorGroup(main_insulator)\ndesign = CableDesign(\"example\", conductor_group, insulator_group)\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.DataModel.CablePosition","page":"Toolbox reference","title":"LineCableModels.DataModel.CablePosition","text":"CablePosition(\n    cable::Union{Nothing, CableDesign},\n    horz::Number,\n    vert::Number\n)\nCablePosition(\n    cable::Union{Nothing, CableDesign},\n    horz::Number,\n    vert::Number,\n    conn::Union{Nothing, Dict{String, Int64}}\n) -> CablePosition\n\n\nConstructs a CablePosition instance with specified cable design, coordinates, and phase mapping.\n\nArguments\n\ncable: A CableDesign object defining the cable structure.\nhorz: Horizontal coordinate [m].\nvert: Vertical coordinate [m].\nconn: A dictionary mapping component names to phase indices, or nothing for default mapping.\n\nReturns\n\nA CablePosition object with the assigned cable design, coordinates, and phase mapping.\n\n#=\n\nnote: Phase mapping\nThe conn argument is a Dict that maps the cable components to their respective phases. The values (1, 2, 3) represent the phase numbers (A, B, C) in a three-phase system. Components mapped to phase 0 will be Kron-eliminated (grounded). Components set to the same phase will be bundled into an equivalent phase.\n\n=#\n\nExamples\n\ncable_design = CableDesign(\"example\", nominal_data, components_dict)\nxa, ya = 0.0, -1.0  # Coordinates in meters\n\n# With explicit phase mapping\ncablepos1 = CablePosition(cable_design, xa, ya, Dict(\"core\" => 1))\n\n# With default phase mapping (first component to phase 1, others to 0)\ndefault_cablepos = CablePosition(cable_design, xa, ya)\n\nSee also\n\nCableDesign\n\n\n\n\n\n","category":"type"},{"location":"reference/#LineCableModels.DataModel.CablePosition-2","page":"Toolbox reference","title":"LineCableModels.DataModel.CablePosition","text":"struct CablePosition\n\nRepresents a physically defined cable with position and phase mapping within a system.\n\ndesign_data::CableDesign: The CableDesign object assigned to this cable position.\nhorz::Number: Horizontal coordinate [m].\nvert::Number: Vertical coordinate [m].\nconn::Vector{Int64}: Phase mapping vector (aligned with design_data.components).\n\n\n\n\n\n","category":"type"},{"location":"reference/#LineCableModels.DataModel.CablesLibrary","page":"Toolbox reference","title":"LineCableModels.DataModel.CablesLibrary","text":"mutable struct CablesLibrary\n\nRepresents a library of cable designs stored as a dictionary.\n\ndata::Dict{String, CableDesign}: Dictionary mapping cable IDs to the respective CableDesign objects.\n\n\n\n\n\n","category":"type"},{"location":"reference/#LineCableModels.DataModel.CablesLibrary-Tuple{}","page":"Toolbox reference","title":"LineCableModels.DataModel.CablesLibrary","text":"CablesLibrary() -> CablesLibrary\n\n\nConstructs an empty CablesLibrary instance.\n\nArguments\n\nNone.\n\nReturns\n\nA CablesLibrary object with an empty dictionary of cable designs.\n\nExamples\n\n# Create a new, empty library\nlibrary = CablesLibrary()\n\nSee also\n\nCableDesign\nadd!\ndelete!\nLineCableModels.ImportExport.save\nDataFrame\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.DataModel.ConductorGroup","page":"Toolbox reference","title":"LineCableModels.DataModel.ConductorGroup","text":"mutable struct ConductorGroup <: LineCableModels.DataModel.AbstractConductorPart\n\nRepresents a composite conductor group assembled from multiple conductive layers or stranded wires.\n\nThis structure serves as a container for different AbstractConductorPart elements  (such as wire arrays, strips, and tubular conductors) arranged in concentric layers.  The ConductorGroup aggregates these individual parts and provides equivalent electrical  properties that represent the composite behavior of the entire assembly.\n\nAttributes\n\nradius_in::Number: Inner radius of the conductor group [m].\nradius_ext::Number: Outer radius of the conductor group [m].\ncross_section::Number: Cross-sectional area of the entire conductor group [m²].\nnum_wires::Number: Number of individual wires in the conductor group [dimensionless].\nnum_turns::Number: Number of turns per meter of each wire strand [1/m].\nresistance::Number: DC resistance of the conductor group [Ω].\nalpha::Number: Temperature coefficient of resistance [1/°C].\ngmr::Number: Geometric mean radius of the conductor group [m].\nlayers::Vector{LineCableModels.DataModel.AbstractConductorPart}: Vector of conductor layer components.\n\n\n\n\n\n","category":"type"},{"location":"reference/#LineCableModels.DataModel.ConductorGroup-Tuple{LineCableModels.DataModel.AbstractConductorPart}","page":"Toolbox reference","title":"LineCableModels.DataModel.ConductorGroup","text":"ConductorGroup(\n    central_conductor::LineCableModels.DataModel.AbstractConductorPart\n) -> ConductorGroup\n\n\nConstructs a ConductorGroup instance initializing with the central conductor part.\n\nArguments\n\ncentral_conductor: An AbstractConductorPart object located at the center of the conductor group.\n\nReturns\n\nA ConductorGroup object initialized with geometric and electrical properties derived from the central conductor.\n\nExamples\n\nmaterial_props = Material(1.7241e-8, 1.0, 0.999994, 20.0, 0.00393)\ncentral_strip = Strip(0.01, 0.002, 0.05, 10, material_props)\nconductor_group = ConductorGroup(central_strip)\nprintln(conductor_group.layers)      # Output: [central_strip]\nprintln(conductor_group.resistance)  # Output: Resistance in \\[Ω\\]\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.DataModel.Diameter","page":"Toolbox reference","title":"LineCableModels.DataModel.Diameter","text":"struct Diameter{T<:Real} <: LineCableModels.DataModel.AbstractRadius\n\nRepresents the diameter of a cable component.\n\nvalue::Real: Numerical value of the diameter [m].\n\n\n\n\n\n","category":"type"},{"location":"reference/#LineCableModels.DataModel.Insulator","page":"Toolbox reference","title":"LineCableModels.DataModel.Insulator","text":"struct Insulator <: LineCableModels.DataModel.AbstractInsulatorPart\n\nRepresents an insulating layer with defined geometric, material, and electrical properties given by the attributes:\n\nradius_in::Number: Internal radius of the insulating layer [m].\nradius_ext::Number: External radius of the insulating layer [m].\nmaterial_props::Material: Material properties of the insulator.\ntemperature::Number: Operating temperature of the insulator [°C].\ncross_section::Number: Cross-sectional area of the insulating layer [m²].\nresistance::Number: Electrical resistance of the insulating layer [Ω/m].\ngmr::Number: Geometric mean radius of the insulator [m].\nshunt_capacitance::Number: Shunt capacitance per unit length of the insulating layer [F/m].\nshunt_conductance::Number: Shunt conductance per unit length of the insulating layer [S·m].\n\n\n\n\n\n","category":"type"},{"location":"reference/#LineCableModels.DataModel.Insulator-Tuple{Union{Number, LineCableModels.DataModel.AbstractCablePart}, Union{Number, Thickness}, Material}","page":"Toolbox reference","title":"LineCableModels.DataModel.Insulator","text":"Insulator(\n    radius_in::Union{Number, LineCableModels.DataModel.AbstractCablePart},\n    radius_ext::Union{Number, Thickness},\n    material_props::Material;\n    temperature\n) -> Insulator\n\n\nConstructs an Insulator object with specified geometric and material parameters.\n\nArguments\n\nradius_in: Internal radius of the insulating layer [m].\nradius_ext: External radius or thickness of the layer [m].\nmaterial_props: Material properties of the insulating material.\ntemperature: Operating temperature of the insulator [°C].\n\nReturns\n\nAn Insulator object with calculated electrical properties.\n\nExamples\n\nmaterial_props = Material(1e10, 3.0, 1.0, 20.0, 0.0)\ninsulator_layer = Insulator(0.01, 0.015, material_props, temperature=25)\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.DataModel.InsulatorGroup","page":"Toolbox reference","title":"LineCableModels.DataModel.InsulatorGroup","text":"mutable struct InsulatorGroup <: LineCableModels.DataModel.AbstractInsulatorPart\n\nRepresents a composite coaxial insulator group assembled from multiple insulating layers.\n\nThis structure serves as a container for different AbstractInsulatorPart elements (such as insulators and semiconductors) arranged in concentric layers. The InsulatorGroup aggregates these individual parts and provides equivalent electrical properties that represent the composite behavior of the entire assembly, stored in the attributes:\n\nradius_in::Number: Inner radius of the insulator group [m].\nradius_ext::Number: Outer radius of the insulator group [m].\ncross_section::Number: Cross-sectional area of the entire insulator group [m²].\nshunt_capacitance::Number: Shunt capacitance per unit length of the insulator group [F/m].\nshunt_conductance::Number: Shunt conductance per unit length of the insulator group [S·m].\nlayers::Vector{LineCableModels.DataModel.AbstractInsulatorPart}: Vector of insulator layer components.\n\n\n\n\n\n","category":"type"},{"location":"reference/#LineCableModels.DataModel.InsulatorGroup-Tuple{LineCableModels.DataModel.AbstractInsulatorPart}","page":"Toolbox reference","title":"LineCableModels.DataModel.InsulatorGroup","text":"InsulatorGroup(\n    initial_insulator::LineCableModels.DataModel.AbstractInsulatorPart\n) -> InsulatorGroup\n\n\nConstructs an InsulatorGroup instance initializing with the initial insulator part.\n\nArguments\n\ninitial_insulator: An AbstractInsulatorPart object located at the innermost position of the insulator group.\n\nReturns\n\nAn InsulatorGroup object initialized with geometric and electrical properties derived from the initial insulator.\n\nExamples\n\nmaterial_props = Material(1e10, 3.0, 1.0, 20.0, 0.0)\ninitial_insulator = Insulator(0.01, 0.015, material_props)\ninsulator_group = InsulatorGroup(initial_insulator)\nprintln(insulator_group.layers)           # Output: [initial_insulator]\nprintln(insulator_group.shunt_capacitance) # Output: Capacitance in [F/m]\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.DataModel.LineCableSystem","page":"Toolbox reference","title":"LineCableModels.DataModel.LineCableSystem","text":"mutable struct LineCableSystem\n\nRepresents a cable system configuration, defining the physical structure, cables, and their positions.\n\nsystem_id::String: Unique identifier for the system.\nline_length::Number: Length of the cable system [m].\nnum_cables::Int64: Number of cables in the system.\nnum_phases::Int64: Number of actual phases in the system.\ncables::Vector{CablePosition}: Cross-section cable positions.\n\n\n\n\n\n","category":"type"},{"location":"reference/#LineCableModels.DataModel.LineCableSystem-Tuple{String, Number, CablePosition}","page":"Toolbox reference","title":"LineCableModels.DataModel.LineCableSystem","text":"LineCableSystem(\n    system_id::String,\n    line_length::Number,\n    cable::CablePosition\n) -> LineCableSystem\n\n\nConstructs a LineCableSystem with an initial cable position and system parameters.\n\nArguments\n\nsystem_id: Identifier for the cable system.\nline_length: Length of the cable system [m].\ncable: Initial CablePosition object defining a cable position and phase mapping.\n\nReturns\n\nA LineCableSystem object initialized with a single cable position.\n\nExamples\n\ncable_design = CableDesign(\"example\", nominal_data, components_dict)\ncablepos1 = CablePosition(cable_design, 0.0, 0.0, Dict(\"core\" => 1))\n\ncable_system = LineCableSystem(\"test_case_1\", 1000.0, cablepos1)\nprintln(cable_system.num_phases)  # Prints number of unique phase assignments\n\nSee also\n\nCablePosition\nCableDesign\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.DataModel.NominalData","page":"Toolbox reference","title":"LineCableModels.DataModel.NominalData","text":"struct NominalData\n\nStores the nominal electrical and geometric parameters for a cable design, with attributes:\n\ndesignation_code::Union{Nothing, String}: Cable designation as per DIN VDE 0271/0276.\nU0::Union{Nothing, Number}: Rated phase-to-earth voltage [kV].\nU::Union{Nothing, Number}: Cross-sectional area of the conductor [mm²].\nconductor_cross_section::Union{Nothing, Number}\nscreen_cross_section::Union{Nothing, Number}: Cross-sectional area of the screen [mm²].\narmor_cross_section::Union{Nothing, Number}: Cross-sectional area of the armor [mm²].\nresistance::Union{Nothing, Number}: Base (DC) resistance of the cable core [Ω/km].\ncapacitance::Union{Nothing, Number}: Capacitance of the main insulation [μF/km].\ninductance::Union{Nothing, Number}: Inductance of the cable (trifoil formation) [mH/km].\n\n\n\n\n\n","category":"type"},{"location":"reference/#LineCableModels.DataModel.NominalData-Tuple{}","page":"Toolbox reference","title":"LineCableModels.DataModel.NominalData","text":"NominalData(\n;\n    designation_code,\n    U0,\n    U,\n    conductor_cross_section,\n    screen_cross_section,\n    armor_cross_section,\n    resistance,\n    capacitance,\n    inductance\n) -> NominalData\n\n\nInitializes a NominalData object with optional default values.\n\nArguments\n\ndesignation_code: Cable designation (default: nothing).\nU0: Phase-to-earth voltage rating [kV] (default: nothing).\nU: Phase-to-phase voltage rating [kV] (default: nothing).\nconductor_cross_section: Conductor cross-section [mm²] (default: nothing).\nscreen_cross_section: Screen cross-section [mm²] (default: nothing).\narmor_cross_section: Armor cross-section [mm²] (default: nothing).\nresistance: Cable resistance [Ω/km] (default: nothing).\ncapacitance: Cable capacitance [μF/km] (default: nothing).\ninductance: Cable inductance (trifoil) [mH/km] (default: nothing).\n\nReturns\n\nAn instance of NominalData with the specified nominal properties.\n\nExamples\n\nnominal_data = NominalData(\n\tconductor_cross_section=1000,\n\tresistance=0.0291,\n\tcapacitance=0.39,\n)\nprintln(nominal_data.conductor_cross_section)\nprintln(nominal_data.resistance)\nprintln(nominal_data.capacitance)\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.DataModel.Semicon","page":"Toolbox reference","title":"LineCableModels.DataModel.Semicon","text":"struct Semicon <: LineCableModels.DataModel.AbstractInsulatorPart\n\nRepresents a semiconducting layer with defined geometric, material, and electrical properties given by the attributes:\n\nradius_in::Number: Internal radius of the semiconducting layer [m].\nradius_ext::Number: External radius of the semiconducting layer [m].\nmaterial_props::Material: Material properties of the semiconductor.\ntemperature::Number: Operating temperature of the semiconductor [°C].\ncross_section::Number: Cross-sectional area of the semiconducting layer [m²].\nresistance::Number: Electrical resistance of the semiconducting layer [Ω/m].\ngmr::Number: Geometric mean radius of the semiconducting layer [m].\nshunt_capacitance::Number: Shunt capacitance per unit length of the semiconducting layer [F/m].\nshunt_conductance::Number: Shunt conductance per unit length of the semiconducting layer [S·m].\n\n\n\n\n\n","category":"type"},{"location":"reference/#LineCableModels.DataModel.Semicon-Tuple{Union{Number, LineCableModels.DataModel.AbstractCablePart}, Union{Number, Thickness}, Material}","page":"Toolbox reference","title":"LineCableModels.DataModel.Semicon","text":"Semicon(\n    radius_in::Union{Number, LineCableModels.DataModel.AbstractCablePart},\n    radius_ext::Union{Number, Thickness},\n    material_props::Material;\n    temperature\n) -> Semicon\n\n\nConstructs a Semicon instance with calculated electrical and geometric properties.\n\nArguments\n\nradius_in: Internal radius of the semiconducting layer [m].\nradius_ext: External radius or thickness of the layer [m].\nmaterial_props: Material properties of the semiconducting material.\ntemperature: Operating temperature of the layer [°C] (default: T₀).\n\nReturns\n\nA Semicon object with initialized properties.\n\nExamples\n\nmaterial_props = Material(1e6, 2.3, 1.0, 20.0, 0.00393)\nsemicon_layer = Semicon(0.01, Thickness(0.002), material_props, temperature=25)\nprintln(semicon_layer.cross_section)      # Expected output: ~6.28e-5 [m²]\nprintln(semicon_layer.resistance)         # Expected output: Resistance in [Ω/m]\nprintln(semicon_layer.gmr)                # Expected output: GMR in [m]\nprintln(semicon_layer.shunt_capacitance)  # Expected output: Capacitance in [F/m]\nprintln(semicon_layer.shunt_conductance)  # Expected output: Conductance in [S·m]\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.DataModel.Strip","page":"Toolbox reference","title":"LineCableModels.DataModel.Strip","text":"struct Strip <: LineCableModels.DataModel.AbstractConductorPart\n\nRepresents a flat conductive strip with defined geometric and material properties given by the attributes:\n\nradius_in::Number: Internal radius of the strip [m].\nradius_ext::Number: External radius of the strip [m].\nthickness::Number: Thickness of the strip [m].\nwidth::Number: Width of the strip [m].\nlay_ratio::Number: Ratio defining the lay length of the strip (twisting factor) [dimensionless].\nmean_diameter::Number: Mean diameter of the strip's helical path [m].\npitch_length::Number: Pitch length of the strip's helical path [m].\nlay_direction::Int64: Twisting direction of the strip (1 = unilay, -1 = contralay) [dimensionless].\nmaterial_props::Material: Material properties of the strip.\ntemperature::Number: Temperature at which the properties are evaluated [°C].\ncross_section::Number: Cross-sectional area of the strip [m²].\nresistance::Number: Electrical resistance of the strip [Ω/m].\ngmr::Number: Geometric mean radius of the strip [m].\n\n\n\n\n\n","category":"type"},{"location":"reference/#LineCableModels.DataModel.Strip-Tuple{Union{Number, LineCableModels.DataModel.AbstractCablePart}, Union{Number, Thickness}, Number, Number, Material}","page":"Toolbox reference","title":"LineCableModels.DataModel.Strip","text":"Strip(\n    radius_in::Union{Number, LineCableModels.DataModel.AbstractCablePart},\n    radius_ext::Union{Number, Thickness},\n    width::Number,\n    lay_ratio::Number,\n    material_props::Material;\n    temperature,\n    lay_direction\n) -> Strip\n\n\nConstructs a Strip object with specified geometric and material parameters.\n\nArguments\n\nradius_in: Internal radius of the strip [m].\nradius_ext: External radius or thickness of the strip [m].\nwidth: Width of the strip [m].\nlay_ratio: Ratio defining the lay length of the strip [dimensionless].\nmaterial_props: Material properties of the strip.\ntemperature: Temperature at which the properties are evaluated [°C]. Defaults to T₀.\nlay_direction: Twisting direction of the strip (1 = unilay, -1 = contralay) [dimensionless]. Defaults to 1.\n\nReturns\n\nA Strip object with calculated geometric and electrical properties.\n\nExamples\n\nmaterial_props = Material(1.7241e-8, 1.0, 0.999994, 20.0, 0.00393)\nstrip = Strip(0.01, Thickness(0.002), 0.05, 10, material_props, temperature=25)\nprintln(strip.cross_section) # Output: 0.0001 [m²]\nprintln(strip.resistance)    # Output: Resistance value [Ω/m]\n\nSee also\n\nMaterial\nConductorGroup\ncalc_strip_resistance\ncalc_tubular_gmr\ncalc_helical_params\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.DataModel.Thickness","page":"Toolbox reference","title":"LineCableModels.DataModel.Thickness","text":"struct Thickness{T<:Real} <: LineCableModels.DataModel.AbstractRadius\n\nRepresents the thickness of a cable component.\n\nvalue::Real: Numerical value of the thickness [m].\n\n\n\n\n\n","category":"type"},{"location":"reference/#LineCableModels.DataModel.Tubular","page":"Toolbox reference","title":"LineCableModels.DataModel.Tubular","text":"struct Tubular <: LineCableModels.DataModel.AbstractConductorPart\n\nRepresents a tubular or solid (radius_in=0) conductor with geometric and material properties defined as:\n\nradius_in::Number: Internal radius of the tubular conductor [m].\nradius_ext::Number: External radius of the tubular conductor [m].\nmaterial_props::Material: A Material object representing the physical properties of the conductor material.\ntemperature::Number: Temperature at which the properties are evaluated [°C].\ncross_section::Number: Cross-sectional area of the tubular conductor [m²].\nresistance::Number: Electrical resistance (DC) of the tubular conductor [Ω/m].\ngmr::Number: Geometric mean radius of the tubular conductor [m].\n\n\n\n\n\n","category":"type"},{"location":"reference/#LineCableModels.DataModel.Tubular-Tuple{Union{Number, LineCableModels.DataModel.AbstractCablePart}, Union{Number, Thickness}, Material}","page":"Toolbox reference","title":"LineCableModels.DataModel.Tubular","text":"Tubular(\n    radius_in::Union{Number, LineCableModels.DataModel.AbstractCablePart},\n    radius_ext::Union{Number, Thickness},\n    material_props::Material;\n    temperature\n) -> Tubular\n\n\nInitializes a Tubular object with specified geometric and material parameters.\n\nArguments\n\nradius_in: Internal radius of the tubular conductor [m].\nradius_ext: External radius of the tubular conductor [m].\nmaterial_props: A Material object representing the physical properties of the conductor material.\ntemperature: Temperature at which the properties are evaluated [°C]. Defaults to T₀.\n\nReturns\n\nAn instance of Tubular initialized with calculated geometric and electrical properties.\n\nExamples\n\nmaterial_props = Material(1.7241e-8, 1.0, 0.999994, 20.0, 0.00393)\ntubular = Tubular(0.01, 0.02, material_props, temperature=25)\nprintln(tubular.cross_section) # Output: 0.000942 [m²]\nprintln(tubular.resistance)    # Output: Resistance value [Ω/m]\n\nSee also\n\nMaterial\ncalc_tubular_resistance\ncalc_tubular_gmr\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.DataModel.WireArray","page":"Toolbox reference","title":"LineCableModels.DataModel.WireArray","text":"struct WireArray <: LineCableModels.DataModel.AbstractConductorPart\n\nRepresents an array of wires equally spaced around a circumference of arbitrary radius, with attributes:\n\nradius_in::Number: Internal radius of the wire array [m].\nradius_ext::Number: External radius of the wire array [m].\nradius_wire::Number: Radius of each individual wire [m].\nnum_wires::Int64: Number of wires in the array [dimensionless].\nlay_ratio::Number: Ratio defining the lay length of the wires (twisting factor) [dimensionless].\nmean_diameter::Number: Mean diameter of the wire array [m].\npitch_length::Number: Pitch length of the wire array [m].\nlay_direction::Int64: Twisting direction of the strands (1 = unilay, -1 = contralay) [dimensionless].\nmaterial_props::Material: Material object representing the physical properties of the wire material.\ntemperature::Number: Temperature at which the properties are evaluated [°C].\ncross_section::Number: Cross-sectional area of all wires in the array [m²].\nresistance::Number: Electrical resistance per wire in the array [Ω/m].\ngmr::Number: Geometric mean radius of the wire array [m].\n\n\n\n\n\n","category":"type"},{"location":"reference/#LineCableModels.DataModel.WireArray-Tuple{Union{Number, LineCableModels.DataModel.AbstractCablePart}, Union{Number, Diameter}, Int64, Number, Material}","page":"Toolbox reference","title":"LineCableModels.DataModel.WireArray","text":"WireArray(\n    radius_in::Union{Number, LineCableModels.DataModel.AbstractCablePart},\n    radius_wire::Union{Number, Diameter},\n    num_wires::Int64,\n    lay_ratio::Number,\n    material_props::Material;\n    temperature,\n    lay_direction\n) -> WireArray\n\n\nConstructs a WireArray instance based on specified geometric and material parameters.\n\nArguments\n\nradius_in: Internal radius of the wire array [m].\nradius_wire: Radius of each individual wire [m].\nnum_wires: Number of wires in the array [dimensionless].\nlay_ratio: Ratio defining the lay length of the wires (twisting factor) [dimensionless].\nmaterial_props: A Material object representing the material properties.\ntemperature: Temperature at which the properties are evaluated [°C].\nlay_direction: Twisting direction of the strands (1 = unilay, -1 = contralay) [dimensionless].\n\nReturns\n\nA WireArray object with calculated geometric and electrical properties.\n\nExamples\n\nmaterial_props = Material(1.7241e-8, 1.0, 0.999994, 20.0, 0.00393)\nwire_array = WireArray(0.01, Diameter(0.002), 7, 10, material_props, temperature=25)\nprintln(wire_array.mean_diameter)  # Outputs mean diameter in m\nprintln(wire_array.resistance)     # Outputs resistance in Ω/m\n\nSee also\n\nMaterial\nConductorGroup\ncalc_tubular_resistance\ncalc_wirearray_gmr\ncalc_helical_params\n\n\n\n\n\n","category":"method"},{"location":"reference/#Base.delete!-Tuple{CablesLibrary, String}","page":"Toolbox reference","title":"Base.delete!","text":"delete!(library::CablesLibrary, cable_id::String)\n\n\nRemoves a cable design from a CablesLibrary object by its ID.\n\nArguments\n\nlibrary: An instance of CablesLibrary from which the cable design will be removed.\ncable_id: The ID of the cable design to remove.\n\nReturns\n\nNothing. Modifies the data field of the CablesLibrary object in-place by removing the specified cable design if it exists.\n\nExamples\n\nlibrary = CablesLibrary()\ndesign = CableDesign(\"example\", ...) # Initialize a CableDesign\nadd!(library, design)\n\n# Remove the cable design\ndelete!(library, \"example\")\nhaskey(library, \"example\")  # Returns false\n\nSee also\n\nCablesLibrary\nadd!\n\n\n\n\n\n","category":"method"},{"location":"reference/#Base.get","page":"Toolbox reference","title":"Base.get","text":"get(\n    library::CablesLibrary,\n    cable_id::String\n) -> Union{Nothing, CableDesign}\nget(\n    library::CablesLibrary,\n    cable_id::String,\n    default\n) -> Any\n\n\nRetrieves a cable design from a CablesLibrary object by its ID.\n\nArguments\n\nlibrary: An instance of CablesLibrary from which the cable design will be retrieved.\ncable_id: The ID of the cable design to retrieve.\n\nReturns\n\nA CableDesign object corresponding to the given cable_id if found, otherwise nothing.\n\nExamples\n\nlibrary = CablesLibrary()\ndesign = CableDesign(\"example\", ...) # Initialize a CableDesign\nadd!(library, design)\n\n# Retrieve the cable design\nretrieved_design = get(library, \"cable1\")\nprintln(retrieved_design.id)  # Prints \"example\"\n\n# Attempt to retrieve a non-existent design\nmissing_design = get(library, \"nonexistent_id\")\nprintln(missing_design === nothing)  # Prints true\n\nSee also\n\nCablesLibrary\nCableDesign\nadd!\ndelete!\n\n\n\n\n\n","category":"function"},{"location":"reference/#LineCableModels.DataModel.flat_formation-Union{Tuple{T}, Tuple{T, T, T}} where T<:Union{Float64, Measurements.Measurement{Float64}}","page":"Toolbox reference","title":"LineCableModels.DataModel.flat_formation","text":"flat_formation(\n    xc::Union{Float64, Measurements.Measurement{Float64}},\n    yc::Union{Float64, Measurements.Measurement{Float64}},\n    s::Union{Float64, Measurements.Measurement{Float64}};\n    vertical\n) -> NTuple{6, Union{Float64, Measurements.Measurement{Float64}}}\n\n\nCalculates the coordinates of three conductors arranged in a flat (horizontal or vertical) formation.\n\nArguments\n\nxc: X-coordinate of the reference point [m].\nyc: Y-coordinate of the reference point [m].\ns: Spacing between adjacent conductors [m].\nvertical: Boolean flag indicating whether the formation is vertical.\n\nReturns\n\nA tuple containing:\nxa, ya: Coordinates of the first conductor [m].\nxb, yb: Coordinates of the second conductor [m].\nxc, yc: Coordinates of the third conductor [m].\n\nExamples\n\n# Horizontal formation\nxa, ya, xb, yb, xc, yc = flat_formation(0.0, 0.0, 0.1)\nprintln((xa, ya))  # First conductor coordinates\nprintln((xb, yb))  # Second conductor coordinates\nprintln((xc, yc))  # Third conductor coordinates\n\n# Vertical formation\nxa, ya, xb, yb, xc, yc = flat_formation(0.0, 0.0, 0.1, vertical=true)\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.DataModel.trifoil_formation-Union{Tuple{T}, Tuple{T, T, T}} where T<:Union{Float64, Measurements.Measurement{Float64}}","page":"Toolbox reference","title":"LineCableModels.DataModel.trifoil_formation","text":"trifoil_formation(\n    xc::Union{Float64, Measurements.Measurement{Float64}},\n    yc::Union{Float64, Measurements.Measurement{Float64}},\n    r_ext::Union{Float64, Measurements.Measurement{Float64}}\n) -> NTuple{6, Union{Float64, Measurements.Measurement{Float64}}}\n\n\nCalculates the coordinates of three cables arranged in a trifoil pattern.\n\nArguments\n\nxc: X-coordinate of the center point [m].\nyc: Y-coordinate of the center point [m].\nr_ext: External radius of the circular layout [m].\n\nReturns\n\nA tuple containing:\nxa, ya: Coordinates of the top cable [m].\nxb, yb: Coordinates of the bottom-left cable [m].\nxc, yc: Coordinates of the bottom-right cable [m].\n\nExamples\n\nxa, ya, xb, yb, xc, yc = trifoil_formation(0.0, 0.0, 0.035)\nprintln((xa, ya))  # Coordinates of top cable\nprintln((xb, yb))  # Coordinates of bottom-left cable\nprintln((xc, yc))  # Coordinates of bottom-right cable\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.add!","page":"Toolbox reference","title":"LineCableModels.add!","text":"add!(\n    system::LineCableSystem,\n    cable::CableDesign,\n    horz::Number,\n    vert::Number\n) -> LineCableSystem\nadd!(\n    system::LineCableSystem,\n    cable::CableDesign,\n    horz::Number,\n    vert::Number,\n    conn::Union{Nothing, Dict{String, Int64}}\n) -> LineCableSystem\n\n\nAdds a new cable position to an existing LineCableSystem, updating its phase mapping and cable count.\n\nArguments\n\nsystem: Instance of LineCableSystem to which the cable will be added.\ncable: A CableDesign object defining the cable structure.\nhorz: Horizontal coordinate [m].\nvert: Vertical coordinate [m].\nconn: Dictionary mapping component names to phase indices, or nothing for automatic assignment.\n\nReturns\n\nThe modified LineCableSystem object with the new cable added.\n\nExamples\n\ncable_design = CableDesign(\"example\", nominal_data, components_dict)\n\n# Define coordinates for two cables\nxa, ya = 0.0, -1.0\nxb, yb = 1.0, -2.0\n\n# Create initial system with one cable\ncablepos1 = CablePosition(cable_design, xa, ya, Dict(\"core\" => 1))\ncable_system = LineCableSystem(\"test_case_1\", 1000.0, cablepos1)\n\n# Add second cable to system\nadd!(cable_system, cable_design, xb, yb, Dict(\"core\" => 2))\n\nprintln(cable_system.num_cables)  # Prints: 2\n\nSee also\n\nLineCableSystem\nCablePosition\nCableDesign\n\n\n\n\n\n","category":"function"},{"location":"reference/#LineCableModels.add!-Tuple{CableDesign, CableComponent}","page":"Toolbox reference","title":"LineCableModels.add!","text":"add!(\n    design::CableDesign,\n    component::CableComponent\n) -> CableDesign\n\n\nAdds a cable component to an existing CableDesign.\n\nArguments\n\ndesign: A CableDesign object where the component will be added.\ncomponent: A CableComponent to add to the design.\n\nReturns\n\nThe modified CableDesign object.\n\nNotes\n\nIf a component with the same ID already exists, it will be overwritten, and a warning will be logged.\n\nExamples\n\nconductor_group = ConductorGroup(wire_array)\ninsulator_group = InsulatorGroup(insulation)\ncomponent = CableComponent(\"sheath\", conductor_group, insulator_group)\nadd!(design, component)\n\nSee also\n\nCableDesign\nCableComponent\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.add!-Tuple{CableDesign, String, ConductorGroup, InsulatorGroup}","page":"Toolbox reference","title":"LineCableModels.add!","text":"add!(\n    design::CableDesign,\n    component_id::String,\n    conductor_group::ConductorGroup,\n    insulator_group::InsulatorGroup\n) -> CableDesign\n\n\nAdds a cable component to an existing CableDesign using separate conductor and insulator groups. Performs as a convenience wrapper to construct the CableComponent object with reduced boilerplate.\n\nArguments\n\ndesign: A CableDesign object where the component will be added.\ncomponent_id: ID for the new component.\nconductor_group: A ConductorGroup for the component.\ninsulator_group: An InsulatorGroup for the component.\n\nReturns\n\nThe modified CableDesign object.\n\nExamples\n\nconductor_group = ConductorGroup(wire_array)\ninsulator_group = InsulatorGroup(insulation)\nadd!(design, \"shield\", conductor_group, insulator_group)\n\nSee also\n\nCableDesign\nCableComponent\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.add!-Tuple{CablesLibrary, CableDesign}","page":"Toolbox reference","title":"LineCableModels.add!","text":"Stores a cable design in a CablesLibrary object.\n\nArguments\n\nlibrary: An instance of CablesLibrary to which the cable design will be added.\ndesign: A CableDesign object representing the cable design to be added. This object must have a cable_id field to uniquely identify it.\n\nReturns\n\nNone. Modifies the data field of the CablesLibrary object in-place by adding the new cable design.\n\nExamples\n\nlibrary = CablesLibrary()\ndesign = CableDesign(\"example\", ...) # Initialize CableDesign with required fields\nadd!(library, design)\nprintln(library) # Prints the updated dictionary containing the new cable design\n\nSee also\n\nCablesLibrary\nCableDesign\ndelete!\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.add!-Union{Tuple{T}, Tuple{ConductorGroup, Type{T}, Vararg{Any}}} where T<:LineCableModels.DataModel.AbstractConductorPart","page":"Toolbox reference","title":"LineCableModels.add!","text":"add!(\n    group::ConductorGroup,\n    part_type::Type{T<:LineCableModels.DataModel.AbstractConductorPart},\n    args...;\n    kwargs...\n) -> ConductorGroup\n\n\nAdds a new part to an existing ConductorGroup object and updates its equivalent electrical parameters.\n\nArguments\n\ngroup: ConductorGroup object to which the new part will be added.\npart_type: Type of conductor part to add (AbstractConductorPart).\nargs...: Positional arguments specific to the constructor of the part_type (AbstractConductorPart) [various].\nkwargs...: Named arguments for the constructor including optional values specific to the constructor of the part_type (AbstractConductorPart) [various].\n\nReturns\n\nThe function modifies the ConductorGroup instance in place and does not return a value.\n\nNotes\n\nUpdates gmr, resistance, alpha, radius_ext, cross_section, and num_wires to account for the new part.\nThe temperature of the new part defaults to the temperature of the first layer if not specified.\nThe radius_in of the new part defaults to the external radius of the existing conductor if not specified.\n\nwarning: Note\nWhen an AbstractCablePart is provided as radius_in, the constructor retrieves its radius_ext value, allowing the new cable part to be placed directly over the existing part in a layered cable design.\nIn case of uncertain measurements, if the added cable part is of a different type than the existing one, the uncertainty is removed from the radius value before being passed to the new component. This ensures that measurement uncertainties do not inappropriately cascade across different cable parts.\n\nExamples\n\nmaterial_props = Material(1.7241e-8, 1.0, 0.999994, 20.0, 0.00393)\nconductor = ConductorGroup(Strip(0.01, 0.002, 0.05, 10, material_props))\nadd!(conductor, WireArray, 0.02, 0.002, 7, 15, material_props, temperature = 25)\n\nSee also\n\nConductorGroup\nWireArray\nStrip\nTubular\ncalc_equivalent_gmr\ncalc_parallel_equivalent\ncalc_equivalent_alpha\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.add!-Union{Tuple{T}, Tuple{InsulatorGroup, Type{T}, Vararg{Any}}} where T<:LineCableModels.DataModel.AbstractInsulatorPart","page":"Toolbox reference","title":"LineCableModels.add!","text":"add!(\n    group::InsulatorGroup,\n    part_type::Type{T<:LineCableModels.DataModel.AbstractInsulatorPart},\n    args...;\n    f,\n    kwargs...\n) -> InsulatorGroup\n\n\nAdds a new part to an existing InsulatorGroup object and updates its equivalent electrical parameters.\n\nArguments\n\ngroup: InsulatorGroup object to which the new part will be added.\npart_type: Type of insulator part to add (AbstractInsulatorPart).\nargs...: Positional arguments specific to the constructor of the part_type (AbstractInsulatorPart) [various].\nkwargs...: Named arguments for the constructor including optional values specific to the constructor of the part_type (AbstractInsulatorPart) [various].\n\nReturns\n\nThe function modifies the InsulatorGroup instance in place and does not return a value.\n\nNotes\n\nUpdates shunt_capacitance, shunt_conductance, radius_ext, and cross_section to account for the new part.\nThe radius_in of the new part defaults to the external radius of the existing insulator group if not specified.\n\nwarning: Note\nWhen an AbstractCablePart is provided as radius_in, the constructor retrieves its radius_ext value, allowing the new cable part to be placed directly over the existing part in a layered cable design.\nIn case of uncertain measurements, if the added cable part is of a different type than the existing one, the uncertainty is removed from the radius value before being passed to the new component. This ensures that measurement uncertainties do not inappropriately cascade across different cable parts.\n\nExamples\n\nmaterial_props = Material(1e10, 3.0, 1.0, 20.0, 0.0)\ninsulator_group = InsulatorGroup(Insulator(0.01, 0.015, material_props))\nadd!(insulator_group, Semicon, 0.015, 0.018, material_props)\n\nSee also\n\nInsulatorGroup\nInsulator\nSemicon\ncalc_parallel_equivalent\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.preview-Tuple{CableDesign}","page":"Toolbox reference","title":"LineCableModels.preview","text":"preview(\n    design::CableDesign;\n    x_offset,\n    y_offset,\n    plt,\n    display_plot,\n    display_legend,\n    backend,\n    sz\n) -> Any\n\n\nDisplays the cross-section of a cable design.\n\nArguments\n\ndesign: A CableDesign object representing the cable structure.\nx_offset: Horizontal offset for the plot [m].\ny_offset: Vertical offset for the plot [m].\nplt: An optional Plots.Plot object to use for plotting.\ndisplay_plot: Boolean flag to display the plot after rendering.\ndisplay_legend: Boolean flag to display the legend in the plot.\nbackend: Optional plotting backend to use. If not specified, the function will choose a suitable backend based on the environment (e.g., GR for headless, PlotlyJS for interactive).\nsz: Optional plot dimensions (width, height). Default: (800, 600).\n\nReturns\n\nA Plots.Plot object representing the visualized cable design.\n\nExamples\n\nconductor_group = ConductorGroup(central_conductor)\ninsulator_group = InsulatorGroup(main_insulation)\ncomponent = CableComponent(\"core\", conductor_group, insulator_group)\ndesign = CableDesign(\"example\", component)\ncable_plot = preview(design)  # Cable cross-section is displayed\n\nSee also\n\nCableDesign\nConductorGroup\nInsulatorGroup\nWireArray\nTubular\nStrip\nSemicon\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.preview-Tuple{LineCableSystem}","page":"Toolbox reference","title":"LineCableModels.preview","text":"preview(\n    system::LineCableSystem;\n    earth_model,\n    zoom_factor,\n    backend,\n    sz,\n    display_plot\n) -> Plots.Plot\n\n\nDisplays the cross-section of a cable system.\n\nArguments\n\nsystem: A LineCableSystem object containing the cable arrangement.\nearth_model: Optional EarthModel to display earth layers.\nzoom_factor: A scaling factor for adjusting the x-axis limits [dimensionless].\nbackend: Optional plotting backend to use.\nsz: Optional plot dimensions (width, height). Default: (800, 600).\n\nReturns\n\nNothing. Displays a plot of the cable system cross-section with cables, earth layers (if applicable), and the air/earth interface.\n\nExamples\n\nsystem = LineCableSystem(\"test_system\", 1000.0, cable_pos)\nearth_params = EarthModel(f, 100.0, 10.0, 1.0)\npreview(system, earth_model=earth_params, zoom_factor=0.5)\n\nSee also\n\nLineCableSystem\nEarthModel\nCablePosition\n\n\n\n\n\n","category":"method"},{"location":"reference/#Base-parameters-(R,-L,-C,-G)","page":"Toolbox reference","title":"Base parameters (R, L, C, G)","text":"","category":"section"},{"location":"reference/#LineCableModels.DataModel.BaseParams","page":"Toolbox reference","title":"LineCableModels.DataModel.BaseParams","text":"LineCableModels.DataModel.BaseParams\n\nThe BaseParams submodule provides fundamental functions for determining the base electrical parameters (R, L, C, G) of cable components within the LineCableModels.DataModel module. This includes implementations of standard engineering formulas for resistance, inductance, and geometric parameters of various conductor configurations.\n\nOverview\n\nImplements basic electrical engineering formulas for calculating DC resistance and inductance of different conductor geometries (tubular, strip, wire arrays).\nImplements basic formulas for capacitance and dielectric losses in insulators and semiconductors.\nProvides functions for temperature correction of material properties.\nCalculates geometric mean radii for different conductor configurations.\nIncludes functions for determining the effective length for helical wire arrangements.\nCalculates equivalent electrical parameters and correction factors for different geometries and configurations.\n\nDependencies\n\nBase\nCore\nDocStringExtensions\nForceImport\nLineCableModels\nLineCableModels.Utils\nMeasurements\nReexport\n\nExports\n\ncalc_equivalent_alpha\ncalc_equivalent_eps\ncalc_equivalent_gmr\ncalc_equivalent_lossfact\ncalc_equivalent_mu\ncalc_equivalent_rho\ncalc_gmd\ncalc_helical_params\ncalc_inductance_trifoil\ncalc_parallel_equivalent\ncalc_shunt_capacitance\ncalc_shunt_conductance\ncalc_sigma_lossfact\ncalc_solenoid_correction\ncalc_strip_resistance\ncalc_temperature_correction\ncalc_tubular_gmr\ncalc_tubular_inductance\ncalc_tubular_resistance\ncalc_wirearray_coords\ncalc_wirearray_gmr\n\n\n\n\n\n","category":"module"},{"location":"reference/#LineCableModels.DataModel.BaseParams.calc_equivalent_alpha-Union{Tuple{T}, NTuple{4, T}} where T<:Union{Float64, Measurements.Measurement{Float64}}","page":"Toolbox reference","title":"LineCableModels.DataModel.BaseParams.calc_equivalent_alpha","text":"calc_equivalent_alpha(\n    alpha1::Union{Float64, Measurements.Measurement{Float64}},\n    R1::Union{Float64, Measurements.Measurement{Float64}},\n    alpha2::Union{Float64, Measurements.Measurement{Float64}},\n    R2::Union{Float64, Measurements.Measurement{Float64}}\n) -> Union{Float64, Measurements.Measurement{Float64}}\n\n\nCalculates the equivalent temperature coefficient of resistance (alpha) when two conductors are connected in parallel, by cross-weighted-resistance averaging:\n\nalpha_eq = fracalpha_1 R_2 + alpha_2 R1R_1 + R_2\n\nwhere alpha_1, alpha_2 are the temperature coefficients of the conductors, and R_1, R_2 are the respective resistances.\n\nArguments\n\nalpha1: Temperature coefficient of resistance of the first conductor [1/°C].\nR1: Resistance of the first conductor [Ω].\nalpha2: Temperature coefficient of resistance of the second conductor [1/°C].\nR2: Resistance of the second conductor [Ω].\n\nReturns\n\nThe equivalent temperature coefficient [1/°C] for the parallel combination.\n\nExamples\n\nalpha_conductor = 0.00393  # Copper\nalpha_new_part = 0.00403   # Aluminum\nR_conductor = 0.5\nR_new_part = 1.0\nalpha_eq = calc_equivalent_alpha(alpha_conductor, R_conductor, alpha_new_part, R_new_part)\nprintln(alpha_eq)  # Output: 0.00396 (approximately)\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.DataModel.BaseParams.calc_equivalent_eps-Union{Tuple{T}, Tuple{T, T, T}} where T<:Union{Float64, Measurements.Measurement{Float64}}","page":"Toolbox reference","title":"LineCableModels.DataModel.BaseParams.calc_equivalent_eps","text":"calc_equivalent_eps(\n    C_eq::Union{Float64, Measurements.Measurement{Float64}},\n    radius_ext::Union{Float64, Measurements.Measurement{Float64}},\n    radius_in::Union{Float64, Measurements.Measurement{Float64}}\n) -> Union{Float64, Measurements.Measurement{Float64}}\n\n\nCalculates the equivalent permittivity for a coaxial cable insulation, using the formula [4]:\n\nvarepsilon_eq = fracC_eq log(fracr_extr_in)2pi varepsilon_0\n\nwhere varepsilon_0 is the permittivity of free space.\n\nArguments\n\nC_eq: Equivalent capacitance of the insulation [F/m].\nradius_ext: External radius of the insulation [m].\nradius_in: Internal radius of the insulation [m].\n\nReturns\n\nEquivalent relative permittivity of the insulation [dimensionless].\n\nExamples\n\neps_eq = calc_equivalent_eps(1e-10, 0.01, 0.005)  # Expected output: ~2.26 [dimensionless]\n\nSee also\n\nε₀\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.DataModel.BaseParams.calc_equivalent_gmr-Tuple{LineCableModels.DataModel.AbstractCablePart, LineCableModels.DataModel.AbstractCablePart}","page":"Toolbox reference","title":"LineCableModels.DataModel.BaseParams.calc_equivalent_gmr","text":"calc_equivalent_gmr(\n    existing::LineCableModels.DataModel.AbstractCablePart,\n    new_layer::LineCableModels.DataModel.AbstractCablePart\n) -> Any\n\n\nCalculates the equivalent geometric mean radius (GMR) of a conductor after adding a new layer, by recursive application of the multizone stranded conductor defined as [3]:\n\nGMR_eq = GMR_i-1^beta^2 cdot GMR_i^(1-beta)^2 cdot GMD^2beta(1-beta)\n\nbeta = fracS_i-1S_i-1 + S_i\n\nwhere:\n\nS_i-1 is the cumulative cross-sectional area of the existing cable part, S_i is the total cross-sectional area after inclusion of the conducting layer i.\nGMR_i-1 is the cumulative GMR of the existing cable part, GMR_i is the GMR of the conducting layer i.\nGMD is the geometric mean distance between the existing cable part and the new layer, calculated using calc_gmd.\n\nArguments\n\nexisting: The existing cable part (AbstractCablePart).\nnew_layer: The new layer being added (AbstractCablePart).\n\nReturns\n\nUpdated equivalent GMR of the combined conductor [m].\n\nExamples\n\nmaterial_props = Material(1.7241e-8, 1.0, 0.999994, 20.0, 0.00393)\nconductor = Conductor(Strip(0.01, 0.002, 0.05, 10, material_props))\nnew_layer = WireArray(0.02, 0.002, 7, 15, material_props)\nequivalent_gmr = calc_equivalent_gmr(conductor, new_layer)  # Expected output: Updated GMR value [m]\n\nSee also\n\ncalc_gmd\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.DataModel.BaseParams.calc_equivalent_lossfact-Union{Tuple{T}, Tuple{T, T, T}} where T<:Union{Float64, Measurements.Measurement{Float64}}","page":"Toolbox reference","title":"LineCableModels.DataModel.BaseParams.calc_equivalent_lossfact","text":"calc_equivalent_lossfact(\n    G_eq::Union{Float64, Measurements.Measurement{Float64}},\n    C_eq::Union{Float64, Measurements.Measurement{Float64}},\n    ω::Union{Float64, Measurements.Measurement{Float64}}\n) -> Union{Float64, Measurements.Measurement{Float64}}\n\n\nCalculates the equivalent loss factor (tangent) of a dielectric material:\n\ntan delta = fracG_eqomega cdot C_eq\n\nwhere tan delta is the loss factor (tangent).\n\nArguments\n\nG_eq: Equivalent conductance of the material [S·m].\nC_eq: Equivalent capacitance of the material [F/m].\nω: Angular frequency [rad/s].\n\nReturns\n\nEquivalent loss factor of the dielectric material [dimensionless].\n\nExamples\n\nloss_factor = calc_equivalent_lossfact(1e-8, 1e-10, 2π*50)  # Expected output: ~0.0318 [dimensionless]\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.DataModel.BaseParams.calc_equivalent_mu-Union{Tuple{T}, Tuple{T, T, T}} where T<:Union{Float64, Measurements.Measurement{Float64}}","page":"Toolbox reference","title":"LineCableModels.DataModel.BaseParams.calc_equivalent_mu","text":"calc_equivalent_mu(\n    gmr::Union{Float64, Measurements.Measurement{Float64}},\n    radius_ext::Union{Float64, Measurements.Measurement{Float64}},\n    radius_in::Union{Float64, Measurements.Measurement{Float64}}\n) -> Union{Float64, Measurements.Measurement{Float64}}\n\n\nCalculates the relative permeability (mu_r) based on the geometric mean radius (GMR) and conductor dimensions, by executing the inverse of calc_tubular_gmr, and solving for mu_r:\n\nlog GMR = log r_2 - mu_r left fracr_1^4left(r_2^2 - r_1^2right)^2 logleft(fracr_2r_1right) - frac3r_1^2 - r_2^24left(r_2^2 - r_1^2right) right\n\nmu_r = -fracleft(log GMR - log r_2right)fracr_1^4left(r_2^2 - r_1^2right)^2 logleft(fracr_2r_1right) - frac3r_1^2 - r_2^24left(r_2^2 - r_1^2right)\n\nwhere r_1 is the inner radius and r_2 is the outer radius.\n\nArguments\n\ngmr: Geometric mean radius of the conductor [m].\nradius_ext: External radius of the conductor [m].\nradius_in: Internal radius of the conductor [m].\n\nReturns\n\nRelative permeability (mu_r) of the conductor material [dimensionless].\n\nErrors\n\nThrows ArgumentError if radius_ext is less than radius_in.\n\nNotes\n\nAssumes a tubular geometry for the conductor, reducing to the solid case if radius_in is zero.\n\nExamples\n\ngmr = 0.015\nradius_ext = 0.02\nradius_in = 0.01\nmu_r = calc_equivalent_mu(gmr, radius_ext, radius_in)\nprintln(mu_r) # Expected output: ~1.5 [dimensionless]\n\nSee also\n\ncalc_tubular_gmr\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.DataModel.BaseParams.calc_equivalent_rho-Union{Tuple{T}, Tuple{T, T, T}} where T<:Union{Float64, Measurements.Measurement{Float64}}","page":"Toolbox reference","title":"LineCableModels.DataModel.BaseParams.calc_equivalent_rho","text":"calc_equivalent_rho(\n    R::Union{Float64, Measurements.Measurement{Float64}},\n    radius_ext_con::Union{Float64, Measurements.Measurement{Float64}},\n    radius_in_con::Union{Float64, Measurements.Measurement{Float64}}\n) -> Union{Float64, Measurements.Measurement{Float64}}\n\n\nCalculates the equivalent resistivity of a solid tubular conductor, using the formula [4]:\n\nrho_eq = R_eq S_eff = R_eq pi (r_ext^2 - r_in^2)\n\nwhere S_eff is the effective cross-sectional area of the tubular conductor.\n\nArguments\n\nR: Resistance of the conductor [Ω].\nradius_ext_con: External radius of the tubular conductor [m].\nradius_in_con: Internal radius of the tubular conductor [m].\n\nReturns\n\nEquivalent resistivity of the tubular conductor [Ω·m].\n\nExamples\n\nrho_eq = calc_equivalent_rho(0.01, 0.02, 0.01)  # Expected output: ~9.42e-4 [Ω·m]\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.DataModel.BaseParams.calc_gmd-Tuple{LineCableModels.DataModel.AbstractCablePart, LineCableModels.DataModel.AbstractCablePart}","page":"Toolbox reference","title":"LineCableModels.DataModel.BaseParams.calc_gmd","text":"calc_gmd(\n    co1::LineCableModels.DataModel.AbstractCablePart,\n    co2::LineCableModels.DataModel.AbstractCablePart\n) -> Any\n\n\nCalculates the geometric mean distance (GMD) between two cable parts, by using the  definition described in Grover [15]:\n\nlog GMD = left(fracsum_i=1^n_1sum_j=1^n_2 (s_1 cdot s_2) cdot log(d_ij)sum_i=1^n_1sum_j=1^n_2 (s_1 cdot s_2)right)\n\nwhere:\n\nd_ij is the Euclidean distance between elements i and j.\ns_1 and s_2 are the cross-sectional areas of the respective elements.\nn_1 and n_2 are the number of sub-elements in each cable part.\n\nArguments\n\nco1: First cable part (AbstractCablePart).\nco2: Second cable part (AbstractCablePart).\n\nReturns\n\nGeometric mean distance between the cable parts [m].\n\nNotes\n\nFor concentric structures, the GMD converges to the external radii of the outermost element.\n\ninfo: Numerical stability\nThis implementation uses a weighted sum of logarithms rather than the traditional product formula Pi(d_ij)^(1n) found in textbooks. The logarithmic approach prevents numerical underflow/overflow when dealing with many conductors or extreme distance ratios, making it significantly more stable for practical calculations.\n\nExamples\n\nmaterial_props = Material(1.7241e-8, 1.0, 0.999994, 20.0, 0.00393)\nwire_array1 = WireArray(0.01, 0.002, 7, 10, material_props)\nwire_array2 = WireArray(0.02, 0.002, 7, 15, material_props)\ngmd = calc_gmd(wire_array1, wire_array2)  # Expected output: GMD value [m]\n\nstrip = Strip(0.01, 0.002, 0.05, 10, material_props)\ntubular = Tubular(0.01, 0.02, material_props)\ngmd = calc_gmd(strip, tubular)  # Expected output: GMD value [m]\n\nSee also\n\ncalc_wirearray_coords\ncalc_equivalent_gmr\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.DataModel.BaseParams.calc_helical_params-Union{Tuple{T}, Tuple{T, T, T}} where T<:Union{Float64, Measurements.Measurement{Float64}}","page":"Toolbox reference","title":"LineCableModels.DataModel.BaseParams.calc_helical_params","text":"calc_helical_params(\n    radius_in::Union{Float64, Measurements.Measurement{Float64}},\n    radius_ext::Union{Float64, Measurements.Measurement{Float64}},\n    lay_ratio::Union{Float64, Measurements.Measurement{Float64}}\n) -> Tuple{Union{Float64, Measurements.Measurement{Float64}}, Union{Float64, Measurements.Measurement{Float64}}, Union{Float64, Int64, Measurements.Measurement{Float64}}}\n\n\nCalculates the mean diameter, pitch length, and overlength based on cable geometry parameters. The lay ratio is defined as the ratio of the pitch length L_p to the external diameter D_e:\n\nlambda = fracL_pD_e\n\nwhere D_e and L_p are the dimensions represented in the figure.\n\n(Image: )\n\nArguments\n\nradius_in: Inner radius of the cable layer [m].\nradius_ext: Outer radius of the cable layer [m].\nlay_ratio: Ratio of the pitch (lay) length to the external diameter of the corresponding layer of wires [dimensionless].\n\nReturns\n\nmean_diameter: Mean diameter of the cable layer [m].\npitch_length: The length over which the strands complete one full twist [m].\noverlength: Effective length increase resulting from the helical path [1/m].\n\nNotes\n\nReference values for lay_ratio are given under standard EN 50182 [12]:\n\nConductor type Steel wires Aluminum wires Lay ratio - Steel Lay ratio - Aluminum\nAAAC 4 layers - 61 (1/6/12/18/24) - 15/13.5/12.5/11\nACSR 3 layers 7 (1/6) 54 (12/18/24) 19 15/13/11.5\nACSR 2 layers 7 (1/6) 26 (10/16) 19 14/11.5\nACSR 1 layer 7 (1/6) 10 19 14\nACCC/TW - 36 (8/12/16) - 15/13.5/11.5\n\nExamples\n\nradius_in = 0.01\nradius_ext = 0.015\nlay_ratio = 12\n\nmean_diam, pitch, overlength = calc_helical_params(radius_in, radius_ext, lay_ratio)\n# mean_diam ≈ 0.025 [m]\n# pitch ≈ 0.3 [m]\n# overlength > 1.0 [1/m]\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.DataModel.BaseParams.calc_inductance_trifoil-Union{Tuple{T}, NTuple{9, T}} where T<:Union{Float64, Measurements.Measurement{Float64}}","page":"Toolbox reference","title":"LineCableModels.DataModel.BaseParams.calc_inductance_trifoil","text":"calc_inductance_trifoil(\n    r_in_co::Union{Float64, Measurements.Measurement{Float64}},\n    r_ext_co::Union{Float64, Measurements.Measurement{Float64}},\n    rho_co::Union{Float64, Measurements.Measurement{Float64}},\n    mu_r_co::Union{Float64, Measurements.Measurement{Float64}},\n    r_in_scr::Union{Float64, Measurements.Measurement{Float64}},\n    r_ext_scr::Union{Float64, Measurements.Measurement{Float64}},\n    rho_scr::Union{Float64, Measurements.Measurement{Float64}},\n    mu_r_scr::Union{Float64, Measurements.Measurement{Float64}},\n    S::Union{Float64, Measurements.Measurement{Float64}};\n    rho_e,\n    f\n) -> Float64\n\n\nCalculates the positive-sequence inductance of a trifoil-configured cable system composed of core/screen assuming solid bonding, using the formula given under section 4.2.4.3 of CIGRE TB-531:\n\nZ_d = leftZ_a - Z_xright - fracleft( Z_m - Z_x right)^2Z_s - Z_x\n\nL = mathfrakImleft(fracZ_domegaright)\n\nwhere Z_a, Z_s are the self impedances of the core conductor and the screen, and Z_m, and Z_x are the mutual impedances between core/screen and between cables, respectively, as per sections 4.2.3.4, 4.2.3.5, 4.2.3.6 and 4.2.3.8 of the same document [8].\n\nArguments\n\nr_in_co: Internal radius of the phase conductor [m].\nr_ext_co: External radius of the phase conductor [m].\nrho_co: Electrical resistivity of the phase conductor material [Ω·m].\nmu_r_co: Relative permeability of the phase conductor material [dimensionless].\nr_in_scr: Internal radius of the metallic screen [m].\nr_ext_scr: External radius of the metallic screen [m].\nrho_scr: Electrical resistivity of the metallic screen material [Ω·m].\nmu_r_scr: Relative permeability of the screen conductor material [dimensionless].\nS: Spacing between conductors in trifoil configuration [m].\nrho_e: Soil resistivity [Ω·m]. Default: 100 Ω·m.\nf: Frequency [Hz]. Default: f₀.\n\nReturns\n\nPositive-sequence inductance per unit length of the cable system [H/m].\n\nExamples\n\nL = calc_inductance_trifoil(0.01, 0.015, 1.72e-8, 1.0, 0.02, 0.025, 2.83e-8, 1.0, S=0.1, rho_e=50, f=50)\nprintln(L) # Output: Inductance value in H/m\n\nSee also\n\ncalc_tubular_gmr\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.DataModel.BaseParams.calc_parallel_equivalent-Union{Tuple{T}, Tuple{T, T}} where T<:Union{Float64, Complex{Measurements.Measurement{Float64}}, Measurements.Measurement{Float64}, ComplexF64}","page":"Toolbox reference","title":"LineCableModels.DataModel.BaseParams.calc_parallel_equivalent","text":"calc_parallel_equivalent(\n    Z1::Union{Float64, Complex{Measurements.Measurement{Float64}}, Measurements.Measurement{Float64}, ComplexF64},\n    Z2::Union{Float64, Complex{Measurements.Measurement{Float64}}, Measurements.Measurement{Float64}, ComplexF64}\n) -> Any\n\n\nCalculates the parallel equivalent of two impedances (or series equivalent of two admittances):\n\nZ_eq = fracZ_1 Z_2Z_1 + Z_2\n\nThis expression, when applied recursively to LineCableModels.DataModel.WireArray objects, implements the formula for the hexagonal wiring pattern described in CIGRE TB-345 [1] [16]:\n\nfrac1R_textdc = fracpi d^24 rho left( 1 + sum_1^n frac6nk_n right)\n\nk_n = left 1 + left( pi fracD_nlambda_n right)^2 right^12\n\nwhere R_textdc is the DC resistance, d is the diameter of each wire, ho is the resistivity, n is the number of layers following the hexagonal pattern, D_n is the diameter of the n-th layer, and lambda_n is the pitch length of the n-th layer, obtained using calc_helical_params.\n\nArguments\n\nZ1: The total impedance of the existing system [Ω].\nZ2: The impedance of the new layer being added [Ω].\n\nReturns\n\nThe parallel equivalent impedance [Ω].\n\nExamples\n\nZ1 = 5.0\nZ2 = 10.0\nReq = calc_parallel_equivalent(Z1, Z2)\nprintln(Req) # Outputs: 3.3333333333333335\n\nSee also\n\ncalc_helical_params\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.DataModel.BaseParams.calc_shunt_capacitance-Union{Tuple{T}, Tuple{T, T, T}} where T<:Union{Float64, Measurements.Measurement{Float64}}","page":"Toolbox reference","title":"LineCableModels.DataModel.BaseParams.calc_shunt_capacitance","text":"calc_shunt_capacitance(\n    radius_in::Union{Float64, Measurements.Measurement{Float64}},\n    radius_ext::Union{Float64, Measurements.Measurement{Float64}},\n    epsr::Union{Float64, Measurements.Measurement{Float64}}\n) -> Union{Float64, Measurements.Measurement{Float64}}\n\n\nCalculates the shunt capacitance per unit length of a coaxial structure, using the standard formula for the capacitance of a coaxial structure [8] [4] [14]:\n\nC = frac2 pi varepsilon_0 varepsilon_rlog left(fracr_extr_inright)\n\nwhere varepsilon_0 is the vacuum permittivity, varepsilon_r is the relative permittivity of the dielectric material, and r_in and r_ext are the inner and outer radii of the coaxial structure, respectively.\n\nArguments\n\nradius_in: Internal radius of the coaxial structure [m].\nradius_ext: External radius of the coaxial structure [m].\nepsr: Relative permittivity of the dielectric material [dimensionless].\n\nReturns\n\nShunt capacitance per unit length [F/m].\n\nExamples\n\nradius_in = 0.01\nradius_ext = 0.02\nepsr = 2.3\ncapacitance = calc_shunt_capacitance(radius_in, radius_ext, epsr)\nprintln(capacitance) # Expected output: ~1.24e-10 [F/m]\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.DataModel.BaseParams.calc_shunt_conductance-Union{Tuple{T}, Tuple{T, T, T}} where T<:Union{Float64, Measurements.Measurement{Float64}}","page":"Toolbox reference","title":"LineCableModels.DataModel.BaseParams.calc_shunt_conductance","text":"calc_shunt_conductance(\n    radius_in::Union{Float64, Measurements.Measurement{Float64}},\n    radius_ext::Union{Float64, Measurements.Measurement{Float64}},\n    rho::Union{Float64, Measurements.Measurement{Float64}}\n) -> Union{Float64, Measurements.Measurement{Float64}}\n\n\nCalculates the shunt conductance per unit length of a coaxial structure, using the improved model reported in [4] [13] [17]:\n\nG = frac2pisigmalog(fracr_extr_in)\n\nwhere sigma = frac1rho is the conductivity of the dielectric/semiconducting material, r_in is the internal radius, and r_ext is the external radius of the coaxial structure.\n\nArguments\n\nradius_in: Internal radius of the coaxial structure [m].\nradius_ext: External radius of the coaxial structure [m].\nrho: Resistivity of the dielectric/semiconducting material [Ω·m].\n\nReturns\n\nShunt conductance per unit length [S·m].\n\nExamples\n\nradius_in = 0.01\nradius_ext = 0.02\nrho = 1e9\ng = calc_shunt_conductance(radius_in, radius_ext, rho)\nprintln(g) # Expected output: 2.7169e-9 [S·m]\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.DataModel.BaseParams.calc_sigma_lossfact-Union{Tuple{T}, Tuple{T, T, T}} where T<:Union{Float64, Measurements.Measurement{Float64}}","page":"Toolbox reference","title":"LineCableModels.DataModel.BaseParams.calc_sigma_lossfact","text":"calc_sigma_lossfact(\n    G_eq::Union{Float64, Measurements.Measurement{Float64}},\n    radius_in::Union{Float64, Measurements.Measurement{Float64}},\n    radius_ext::Union{Float64, Measurements.Measurement{Float64}}\n) -> Union{Float64, Measurements.Measurement{Float64}}\n\n\nCalculates the effective conductivity of a dielectric material from the known conductance (related to the loss factor tan delta) via [4] [13] [17]:\n\nsigma_eq = fracG_eq2pi log(fracr_extr_in)\n\nwhere sigma_eq = frac1rho_eq is the conductivity of the dielectric/semiconducting material, G_eq is the shunt conductance per unit length, r_in is the internal radius, and r_ext is the external radius of the coaxial structure.\n\nArguments\n\nG_eq: Equivalent conductance of the material [S·m].\nradius_in: Internal radius of the coaxial structure [m].\nradius_ext: External radius of the coaxial structure [m].\n\nReturns\n\nEffective material conductivity per unit length [S·m].\n\nExamples\n\nGeq = 2.7169e-9\nsigma_eq = calc_sigma_lossfact(G_eq, radius_in, radius_ext)\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.DataModel.BaseParams.calc_solenoid_correction-Union{Tuple{T}, Tuple{T, T, T}} where T<:Union{Float64, Measurements.Measurement{Float64}}","page":"Toolbox reference","title":"LineCableModels.DataModel.BaseParams.calc_solenoid_correction","text":"calc_solenoid_correction(\n    num_turns::Union{Float64, Measurements.Measurement{Float64}},\n    radius_ext_con::Union{Float64, Measurements.Measurement{Float64}},\n    radius_ext_ins::Union{Float64, Measurements.Measurement{Float64}}\n) -> Union{Float64, Measurements.Measurement{Float64}}\n\n\nCalculates the solenoid correction factor for magnetic permeability in insulated cables with helical conductors (WireArray), using the formula from Gudmundsdottir et al. [5]:\n\nmu_r sol = 1 + frac2 pi^2 N^2 (r_ins ext^2 - r_con ext^2)log(r_ins extr_con ext)\n\nwhere:\n\nN is the number of turns per unit length.\nr_con ext is the conductor external radius.\nr_ins ext is the insulator external radius.\n\nArguments\n\nnum_turns: Number of turns per unit length [1/m].\nradius_ext_con: External radius of the conductor [m].\nradius_ext_ins: External radius of the insulator [m].\n\nReturns\n\nCorrection factor for the insulator magnetic permeability [dimensionless].\n\nExamples\n\n# Cable with 10 turns per meter, conductor radius 5 mm, insulator radius 10 mm\ncorrection = calc_solenoid_correction(10, 0.005, 0.01)  # Expected output: > 1.0 [dimensionless]\n\n# Non-helical cable (straight conductor)\ncorrection = calc_solenoid_correction(NaN, 0.005, 0.01)  # Expected output: 1.0 [dimensionless]\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.DataModel.BaseParams.calc_strip_resistance-Union{Tuple{T}, NTuple{6, T}} where T<:Union{Float64, Measurements.Measurement{Float64}}","page":"Toolbox reference","title":"LineCableModels.DataModel.BaseParams.calc_strip_resistance","text":"calc_strip_resistance(\n    thickness::Union{Float64, Measurements.Measurement{Float64}},\n    width::Union{Float64, Measurements.Measurement{Float64}},\n    rho::Union{Float64, Measurements.Measurement{Float64}},\n    alpha::Union{Float64, Measurements.Measurement{Float64}},\n    T0::Union{Float64, Measurements.Measurement{Float64}},\n    Top::Union{Float64, Measurements.Measurement{Float64}}\n) -> Union{Float64, Measurements.Measurement{Float64}}\n\n\nCalculates the DC resistance of a strip conductor based on its geometric and material properties, using the basic resistance formula in terms of the resistivity and cross-sectional area:\n\nR = rho fracellW T\n\nwhere ell is the length of the strip, W is the width, and T is the thickness. The length is assumed to be infinite in the direction of current flow, so the resistance is calculated per unit length.\n\nArguments\n\nthickness: Thickness of the strip [m].\nwidth: Width of the strip [m].\nrho: Electrical resistivity of the conductor material [Ω·m].\nalpha: Temperature coefficient of resistivity [1/°C].\nT0: Reference temperature for the material properties [°C].\nTop: Operating temperature of the conductor [°C].\n\nReturns\n\nDC resistance of the strip conductor [Ω].\n\nExamples\n\nthickness = 0.002\nwidth = 0.05\nrho = 1.7241e-8\nalpha = 0.00393\nT0 = 20\nT = 25\nresistance = calc_strip_resistance(thickness, width, rho, alpha, T0, T)\n# Output: ~8.62e-7 Ω\n\nSee also\n\ncalc_temperature_correction\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.DataModel.BaseParams.calc_temperature_correction-Union{Tuple{T}, Tuple{T, T}, Tuple{T, T, T}} where T<:Union{Float64, Measurements.Measurement{Float64}}","page":"Toolbox reference","title":"LineCableModels.DataModel.BaseParams.calc_temperature_correction","text":"calc_temperature_correction(\n    alpha::Union{Float64, Measurements.Measurement{Float64}},\n    Top::Union{Float64, Measurements.Measurement{Float64}}\n) -> Union{Float64, Measurements.Measurement{Float64}}\ncalc_temperature_correction(\n    alpha::Union{Float64, Measurements.Measurement{Float64}},\n    Top::Union{Float64, Measurements.Measurement{Float64}},\n    T0::Union{Float64, Measurements.Measurement{Float64}}\n) -> Union{Float64, Measurements.Measurement{Float64}}\n\n\nCalculates the temperature correction factor for material properties based on the standard linear temperature model [16]:\n\nk(T) = 1 + alpha (T - T_0)\n\nwhere alpha is the temperature coefficient of the material resistivity, T is the operating temperature, and T_0 is the reference temperature. \n\nArguments\n\nalpha: Temperature coefficient of the material property [1/°C].\nT: Current temperature [°C].\nT0: Reference temperature at which the base material property was measured [°C]. Defaults to T₀.\n\nReturns\n\nTemperature correction factor to be applied to the material property [dimensionless].\n\nExamples\n\n    # Copper resistivity correction (alpha = 0.00393 [1/°C])\n    k = calc_temperature_correction(0.00393, 75.0, 20.0)  # Expected output: 1.2158\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.DataModel.BaseParams.calc_tubular_gmr-Union{Tuple{T}, Tuple{T, T, T}} where T<:Union{Float64, Measurements.Measurement{Float64}}","page":"Toolbox reference","title":"LineCableModels.DataModel.BaseParams.calc_tubular_gmr","text":"calc_tubular_gmr(\n    radius_ext::Union{Float64, Measurements.Measurement{Float64}},\n    radius_in::Union{Float64, Measurements.Measurement{Float64}},\n    mu_r::Union{Float64, Measurements.Measurement{Float64}}\n) -> Union{Float64, Measurements.Measurement{Float64}}\n\n\nCalculates the geometric mean radius (GMR) of a tubular conductor, using [2]:\n\nlog GMR = log r_2 - mu_r left fracr_1^4left(r_2^2 - r_1^2right)^2 logleft(fracr_2r_1right) - frac3r_1^2 - r_2^24left(r_2^2 - r_1^2right) right\n\nwhere mu_r is the material magnetic permeability (relative to free space), r_1 and r_2 are the inner and outer radii of the tubular conductor, respectively. If r_2 is approximately equal to r_1 , the tube collapses into a thin shell, and the GMR is equal to r_2. If the tube becomes infinitely thick (e.g., r_2 gg r_1), the GMR diverges to infinity.\n\nArguments\n\nradius_ext: External radius of the tubular conductor [m].\nradius_in: Internal radius of the tubular conductor [m].\nmu_r: Relative permeability of the conductor material [dimensionless].\n\nReturns\n\nGeometric mean radius (GMR) of the tubular conductor [m].\n\nErrors\n\nThrows ArgumentError if radius_ext is less than radius_in.\n\nExamples\n\nradius_ext = 0.02\nradius_in = 0.01\nmu_r = 1.0\ngmr = calc_tubular_gmr(radius_ext, radius_in, mu_r)\nprintln(gmr) # Expected output: ~0.0135 [m]\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.DataModel.BaseParams.calc_tubular_inductance-Union{Tuple{T}, Tuple{T, T, T}} where T<:Union{Float64, Measurements.Measurement{Float64}}","page":"Toolbox reference","title":"LineCableModels.DataModel.BaseParams.calc_tubular_inductance","text":"calc_tubular_inductance(\n    radius_in::Union{Float64, Measurements.Measurement{Float64}},\n    radius_ext::Union{Float64, Measurements.Measurement{Float64}},\n    mu_r::Union{Float64, Measurements.Measurement{Float64}}\n) -> Union{Float64, Measurements.Measurement{Float64}}\n\n\nCalculates the inductance of a tubular conductor per unit length, disregarding skin-effects (DC approximation) [4] [16] [14]:\n\nL = fracmu_r mu_02 pi log left( fracr_extr_in right)\n\nwhere mu_r is the relative permeability of the conductor material, mu_0 is the vacuum permeability, and r_in and r_ext are the inner and outer radii of the conductor, respectively.\n\nArguments\n\nradius_in: Internal radius of the tubular conductor [m].\nradius_ext: External radius of the tubular conductor [m].\nmu_r: Relative permeability of the conductor material [dimensionless].\n\nReturns\n\nInternal inductance of the tubular conductor per unit length [H/m].\n\nExamples\n\nradius_in = 0.01\nradius_ext = 0.02\nmu_r = 1.0\nL = calc_tubular_inductance(radius_in, radius_ext, mu_r)\n# Output: ~2.31e-7 H/m\n\nSee also\n\ncalc_tubular_resistance\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.DataModel.BaseParams.calc_tubular_resistance-Union{Tuple{T}, NTuple{6, T}} where T<:Union{Float64, Measurements.Measurement{Float64}}","page":"Toolbox reference","title":"LineCableModels.DataModel.BaseParams.calc_tubular_resistance","text":"calc_tubular_resistance(\n    radius_in::Union{Float64, Measurements.Measurement{Float64}},\n    radius_ext::Union{Float64, Measurements.Measurement{Float64}},\n    rho::Union{Float64, Measurements.Measurement{Float64}},\n    alpha::Union{Float64, Measurements.Measurement{Float64}},\n    T0::Union{Float64, Measurements.Measurement{Float64}},\n    Top::Union{Float64, Measurements.Measurement{Float64}}\n) -> Union{Float64, Measurements.Measurement{Float64}}\n\n\nCalculates the DC resistance of a tubular conductor based on its geometric and material properties, using the resistivity and cross-sectional area of a hollow cylinder with radii r_in and r_ext:\n\nR = rho fracellpi (r_ext^2 - r_in^2)\n\nwhere ell is the length of the conductor, r_in and r_ext are the inner and outer radii, respectively. The length is assumed to be infinite in the direction of current flow, so the resistance is calculated per unit length.\n\nArguments\n\nradius_in: Internal radius of the tubular conductor [m].\nradius_ext: External radius of the tubular conductor [m].\nrho: Electrical resistivity of the conductor material [Ω·m].\nalpha: Temperature coefficient of resistivity [1/°C].\nT0: Reference temperature for the material properties [°C].\nTop: Operating temperature of the conductor [°C].\n\nReturns\n\nDC resistance of the tubular conductor [Ω].\n\nExamples\n\nradius_in = 0.01\nradius_ext = 0.02\nrho = 1.7241e-8\nalpha = 0.00393\nT0 = 20\nT = 25\nresistance = calc_tubular_resistance(radius_in, radius_ext, rho, alpha, T0, T)\n# Output: ~9.10e-8 Ω\n\nSee also\n\ncalc_temperature_correction\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.DataModel.BaseParams.calc_wirearray_coords-Union{Tuple{T}, Tuple{Int64, T, T}, Tuple{Int64, T, T, Tuple{T, T}}} where T<:Union{Float64, Measurements.Measurement{Float64}}","page":"Toolbox reference","title":"LineCableModels.DataModel.BaseParams.calc_wirearray_coords","text":"calc_wirearray_coords(\n    num_wires::Int64,\n    radius_wire::Union{Float64, Measurements.Measurement{Float64}},\n    radius_in::Union{Float64, Measurements.Measurement{Float64}}\n) -> Vector{Any}\ncalc_wirearray_coords(\n    num_wires::Int64,\n    radius_wire::Union{Float64, Measurements.Measurement{Float64}},\n    radius_in::Union{Float64, Measurements.Measurement{Float64}},\n    C::Tuple{T<:Union{Float64, Measurements.Measurement{Float64}}, T<:Union{Float64, Measurements.Measurement{Float64}}}\n) -> Vector{Any}\n\n\nCalculates the center coordinates of wires arranged in a circular pattern.\n\nArguments\n\nnum_wires: Number of wires in the circular arrangement [dimensionless].\nradius_wire: Radius of each individual wire [m].\nradius_in: Inner radius of the wire array (to wire centers) [m].\nC: Optional tuple representing the center coordinates of the circular arrangement [m]. Default is (0.0, 0.0).\n\nReturns\n\nVector of tuples, where each tuple contains the (x, y) coordinates [m] of the center of a wire.\n\nExamples\n\n# Create a 7-wire array with 2mm wire radius and 1cm inner radius\nwire_coords = calc_wirearray_coords(7, 0.002, 0.01)\nprintln(wire_coords[1]) # Output: First wire coordinates\n\n# Create a wire array with custom center position\nwire_coords = calc_wirearray_coords(7, 0.002, 0.01, C=(0.5, 0.3))\n\nSee also\n\nLineCableModels.DataModel.WireArray\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.DataModel.BaseParams.calc_wirearray_gmr-Union{Tuple{T}, Tuple{T, Int64, T, T}} where T<:Union{Float64, Measurements.Measurement{Float64}}","page":"Toolbox reference","title":"LineCableModels.DataModel.BaseParams.calc_wirearray_gmr","text":"calc_wirearray_gmr(\n    lay_rad::Union{Float64, Measurements.Measurement{Float64}},\n    N::Int64,\n    rad_wire::Union{Float64, Measurements.Measurement{Float64}},\n    mu_r::Union{Float64, Measurements.Measurement{Float64}}\n) -> Union{Float64, Measurements.Measurement{Float64}}\n\n\nCalculates the geometric mean radius (GMR) of a circular wire array, using formula (62), page 335, of the book by Edward Rosa [18]:\n\nGMR = sqrta r n a^n-1\n\nwhere a is the layout radius, n is the number of wires, and r is the radius of each wire.\n\nArguments\n\nlay_rad: Layout radius of the wire array [m].\nN: Number of wires in the array [dimensionless].\nrad_wire: Radius of an individual wire [m].\nmu_r: Relative permeability of the wire material [dimensionless].\n\nReturns\n\nGeometric mean radius (GMR) of the wire array [m].\n\nExamples\n\nlay_rad = 0.05\nN = 7\nrad_wire = 0.002\nmu_r = 1.0\ngmr = calc_wirearray_gmr(lay_rad, N, rad_wire, mu_r)\nprintln(gmr) # Expected output: 0.01187... [m]\n\n\n\n\n\n","category":"method"},{"location":"reference/","page":"Toolbox reference","title":"Toolbox reference","text":"","category":"page"},{"location":"reference/#Earth-properties","page":"Toolbox reference","title":"Earth properties","text":"","category":"section"},{"location":"reference/#LineCableModels.EarthProps","page":"Toolbox reference","title":"LineCableModels.EarthProps","text":"LineCableModels.EarthProps\n\nThe EarthProps module provides functionality for modeling and computing earth properties within the LineCableModels.jl package. This module includes definitions for homogeneous and layered earth models, and formulations for frequency-dependent earth properties, to be used in impedance/admittance calculations.\n\nOverview\n\nDefines the EarthModel object for representing horizontally or vertically multi-layered earth models with frequency-dependent properties (ρ, ε, μ).\nProvides the EarthLayer type for representing individual soil layers with electromagnetic properties.\nImplements a multi-dispatch framework to allow different formulations of frequency-dependent earth models with AbstractFDEMFormulation.\nContains utility functions for building complex multi-layered earth models and generating data summaries.\n\nDependencies\n\nBase\nCore\nDataFrames\nDocStringExtensions\nForceImport\nLineCableModels\nLineCableModels.Utils\nMeasurements\nReexport\n\nExports\n\nCPEarth\nDataFrame\nEarthLayer\nEarthModel\nadd!\n\n\n\n\n\n","category":"module"},{"location":"reference/#DataFrames.DataFrame-Tuple{EarthModel}","page":"Toolbox reference","title":"DataFrames.DataFrame","text":"DataFrame(earth_model::EarthModel) -> DataFrame\n\n\nGenerates a DataFrame summarizing basic properties of earth layers from an EarthModel.\n\nArguments\n\nearth_model: Instance of EarthModel containing earth layers.\n\nReturns\n\nA DataFrame with columns:\nrho_g: Base (DC) resistivity of each layer [Ω·m].\nepsr_g: Base (DC) relative permittivity of each layer [dimensionless].\nmur_g: Base (DC) relative permeability of each layer [dimensionless].\nthickness: Thickness of each layer [m].\n\nExamples\n\ndf = DataFrame(earth_model)\nprintln(df)\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.EarthProps.CPEarth","page":"Toolbox reference","title":"LineCableModels.EarthProps.CPEarth","text":"struct CPEarth <: LineCableModels.EarthProps.AbstractFDEMFormulation\n\nRepresents an earth model with constant properties (CP), i.e. frequency-invariant electromagnetic properties.\n\n\n\n\n\n","category":"type"},{"location":"reference/#LineCableModels.EarthProps.CPEarth-Union{Tuple{T}, Tuple{Vector{T}, T, T, T}} where T<:Union{Float64, Measurements.Measurement{Float64}}","page":"Toolbox reference","title":"LineCableModels.EarthProps.CPEarth","text":"Functor implementation for CPEarth.\n\nComputes frequency-dependent earth properties using the CPEarth formulation, which assumes frequency-invariant values for resistivity, permittivity, and permeability.\n\nArguments\n\nfrequencies: Vector of frequency values [Hz].\nbase_rho_g: Base (DC) electrical resistivity of the soil [Ω·m].\nbase_epsr_g: Base (DC) relative permittivity of the soil [dimensionless].\nbase_mur_g: Base (DC) relative permeability of the soil [dimensionless].\nformulation: Instance of a subtype of AbstractFDEMFormulation defining the computation method.\n\nReturns\n\nrho: Vector of resistivity values [Ω·m] at the given frequencies.\nepsilon: Vector of permittivity values [F/m] at the given frequencies.\nmu: Vector of permeability values [H/m] at the given frequencies.\n\nExamples\n\nfrequencies = [1e3, 1e4, 1e5]\n\n# Using the CP model\nrho, epsilon, mu = CPEarth(frequencies, 100, 10, 1, CPEarth())\nprintln(rho)     # Output: [100, 100, 100]\nprintln(epsilon) # Output: [8.854e-11, 8.854e-11, 8.854e-11]\nprintln(mu)      # Output: [1.2566e-6, 1.2566e-6, 1.2566e-6]\n\nSee also\n\nEarthLayer\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.EarthProps.EarthLayer","page":"Toolbox reference","title":"LineCableModels.EarthProps.EarthLayer","text":"struct EarthLayer{T<:Union{Float64, Measurements.Measurement{Float64}}}\n\nRepresents one single earth layer in an EarthModel object, with base and frequency-dependent properties, and attributes:\n\nbase_rho_g::Union{Float64, Measurements.Measurement{Float64}}: Base (DC) electrical resistivity [Ω·m].\nbase_epsr_g::Union{Float64, Measurements.Measurement{Float64}}: Base (DC) relative permittivity [dimensionless].\nbase_mur_g::Union{Float64, Measurements.Measurement{Float64}}: Base (DC)  relative permeability [dimensionless].\nt::Union{Float64, Measurements.Measurement{Float64}}: Thickness of the layer [m].\nrho_g::Vector{T} where T<:Union{Float64, Measurements.Measurement{Float64}}: Computed resistivity values [Ω·m] at given frequencies.\neps_g::Vector{T} where T<:Union{Float64, Measurements.Measurement{Float64}}: Computed permittivity values [F/m] at given frequencies.\nmu_g::Vector{T} where T<:Union{Float64, Measurements.Measurement{Float64}}: Computed permeability values [H/m] at given frequencies.\n\n\n\n\n\n","category":"type"},{"location":"reference/#LineCableModels.EarthProps.EarthLayer-Union{Tuple{T}, Tuple{T, T, T, T, Vector{T}, Vector{T}, Vector{T}}} where T<:Union{Float64, Measurements.Measurement{Float64}}","page":"Toolbox reference","title":"LineCableModels.EarthProps.EarthLayer","text":"Constructs an EarthLayer instance with specified base and frequency-dependent properties.\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.EarthProps.EarthLayer-Union{Tuple{T}, Tuple{Vector{T}, T, T, T, T, LineCableModels.EarthProps.AbstractFDEMFormulation}} where T<:Union{Float64, Measurements.Measurement{Float64}}","page":"Toolbox reference","title":"LineCableModels.EarthProps.EarthLayer","text":"EarthLayer(\n    frequencies::Array{T<:Union{Float64, Measurements.Measurement{Float64}}, 1},\n    base_rho_g::Union{Float64, Measurements.Measurement{Float64}},\n    base_epsr_g::Union{Float64, Measurements.Measurement{Float64}},\n    base_mur_g::Union{Float64, Measurements.Measurement{Float64}},\n    t::Union{Float64, Measurements.Measurement{Float64}},\n    freq_dependence::LineCableModels.EarthProps.AbstractFDEMFormulation\n) -> EarthLayer\n\n\nConstructs an EarthLayer instance with specified base properties and computes its frequency-dependent values.\n\nArguments\n\nfrequencies: Vector of frequency values [Hz].\nbase_rho_g: Base (DC) electrical resistivity of the layer [Ω·m].\nbase_epsr_g: Base (DC) relative permittivity of the layer [dimensionless].\nbase_mur_g: Base (DC) relative permeability of the layer [dimensionless].\nt: Thickness of the layer [m].\nfreq_dependence: Instance of a subtype of AbstractFDEMFormulation defining the computation method for frequency-dependent properties.\n\nReturns\n\nAn EarthLayer instance with computed frequency-dependent properties.\n\nExamples\n\nfrequencies = [1e3, 1e4, 1e5]\nlayer = EarthLayer(frequencies, 100, 10, 1, 5, CPEarth())\nprintln(layer.rho_g) # Output: [100, 100, 100]\nprintln(layer.eps_g) # Output: [8.854e-11, 8.854e-11, 8.854e-11]\nprintln(layer.mu_g)  # Output: [1.2566e-6, 1.2566e-6, 1.2566e-6]\n\nSee also\n\nCPEarth\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.EarthProps.EarthModel","page":"Toolbox reference","title":"LineCableModels.EarthProps.EarthModel","text":"struct EarthModel{T<:Union{Float64, Measurements.Measurement{Float64}}}\n\nRepresents a multi-layered earth model with frequency-dependent properties, and attributes:\n\nfreq_dependence::LineCableModels.EarthProps.AbstractFDEMFormulation: Selected frequency-dependent formulation for earth properties.\nvertical_layers::Bool: Boolean flag indicating whether the model is treated as vertically layered.\nlayers::Array{EarthLayer{T}, 1} where T<:Union{Float64, Measurements.Measurement{Float64}}: Vector of EarthLayer objects, starting with an air layer and the specified first earth layer.\n\n\n\n\n\n","category":"type"},{"location":"reference/#LineCableModels.EarthProps.EarthModel-Union{Tuple{T}, Tuple{LineCableModels.EarthProps.AbstractFDEMFormulation, Bool, Array{EarthLayer{T}, 1}}} where T<:Union{Float64, Measurements.Measurement{Float64}}","page":"Toolbox reference","title":"LineCableModels.EarthProps.EarthModel","text":"Constructs an EarthModel instance with specified attributes.\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.EarthProps.EarthModel-Union{Tuple{T}, Tuple{Vector{T}, T, T, T}} where T<:Union{Float64, Measurements.Measurement{Float64}}","page":"Toolbox reference","title":"LineCableModels.EarthProps.EarthModel","text":"EarthModel(\n    frequencies::Array{T<:Union{Float64, Measurements.Measurement{Float64}}, 1},\n    rho_g::Union{Float64, Measurements.Measurement{Float64}},\n    epsr_g::Union{Float64, Measurements.Measurement{Float64}},\n    mur_g::Union{Float64, Measurements.Measurement{Float64}};\n    t,\n    freq_dependence,\n    vertical_layers,\n    air_layer\n) -> EarthModel\n\n\nConstructs an EarthModel instance with a specified first earth layer. A semi-infinite air layer is always added before the first earth layer.\n\nArguments\n\nfrequencies: Vector of frequency values [Hz].\nrho_g: Base (DC) electrical resistivity of the first earth layer [Ω·m].\nepsr_g: Base (DC) relative permittivity of the first earth layer [dimensionless].\nmur_g: Base (DC) relative permeability of the first earth layer [dimensionless].\nt: Thickness of the first earth layer [m]. For homogeneous earth models (or the bottommost layer), set t = Inf.\nfreq_dependence: Instance of a subtype of AbstractFDEMFormulation defining the computation method for frequency-dependent properties (default: CPEarth).\nvertical_layers: Boolean flag indicating whether the model should be treated as vertically-layered (default: false).\nair_layer: optional EarthLayer object representing the semi-infinite air layer (default: EarthLayer(frequencies, Inf, 1.0, 1.0, Inf, freq_dependence)).\n\nReturns\n\nAn EarthModel instance with the specified attributes and computed frequency-dependent properties.\n\nExamples\n\nfrequencies = [1e3, 1e4, 1e5]\nearth_model = EarthModel(frequencies, 100, 10, 1, t=Inf)\nprintln(length(earth_model.layers)) # Output: 2 (air + top layer)\nprintln(earth_model.rho_eff) # Output: missing\n\nSee also\n\nEarthLayer\nadd!\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.add!-Union{Tuple{T}, Tuple{EarthModel{T}, Vector{T}, T, T, T}} where T<:Union{Float64, Measurements.Measurement{Float64}}","page":"Toolbox reference","title":"LineCableModels.add!","text":"add!(\n    model::EarthModel{T<:Union{Float64, Measurements.Measurement{Float64}}},\n    frequencies::Array{T<:Union{Float64, Measurements.Measurement{Float64}}, 1},\n    base_rho_g::Union{Float64, Measurements.Measurement{Float64}},\n    base_epsr_g::Union{Float64, Measurements.Measurement{Float64}},\n    base_mur_g::Union{Float64, Measurements.Measurement{Float64}};\n    t\n) -> EarthModel\n\n\nAdds a new earth layer to an existing EarthModel.\n\nArguments\n\nmodel: Instance of EarthModel to which the new layer will be added.\nfrequencies: Vector of frequency values [Hz].\nbase_rho_g: Base electrical resistivity of the new earth layer [Ω·m].\nbase_epsr_g: Base relative permittivity of the new earth layer [dimensionless].\nbase_mur_g: Base relative permeability of the new earth layer [dimensionless].\nt: Thickness of the new earth layer [m] (default: Inf).\n\nReturns\n\nModifies model in place by appending a new EarthLayer.\n\nNotes\n\nFor horizontal layering (vertical_layers = false):\n\nLayer 1 (air) is always infinite (t = Inf).\nLayer 2 (first earth layer) can be infinite if modeling a homogeneous half-space.\nIf adding a third layer (length(EarthModel.layers) == 3), it can be infinite only if the previous layer is finite.\nNo two successive earth layers (length(EarthModel.layers) > 2) can have infinite thickness.\n\nFor vertical layering (vertical_layers = true):\n\nLayer 1 (air) is always horizontal and infinite at z > 0.\nLayer 2 (first vertical layer) is always infinite in z < 0 and y < 0. The first vertical layer is assumed to always end at y = 0.\nLayer 3 (second vertical layer) can be infinite (establishing a vertical interface at y = 0).\nSubsequent layers can be infinite only if the previous is finite.\nNo two successive vertical layers (length(EarthModel.layers) > 3) can both be infinite.\n\nExamples\n\nfrequencies = [1e3, 1e4, 1e5]\n\n# Define a horizontal model with finite thickness for the first earth layer\nhorz_earth_model = EarthModel(frequencies, 100, 10, 1, t=5)\n\n# Add a second horizontal earth layer\nadd!(horz_earth_model, frequencies, 200, 15, 1, t=10)\nprintln(length(horz_earth_model.layers)) # Output: 3\n\n# The bottom layer should be set to infinite thickness\nadd!(horz_earth_model, frequencies, 300, 15, 1, t=Inf)\nprintln(length(horz_earth_model.layers)) # Output: 4\n\n# Initialize a vertical-layered model with first interface at y = 0.\nvert_earth_model = EarthModel(frequencies, 100, 10, 1, t=Inf, vertical_layers=true)\n\n# Add a second vertical layer at y = 0 (this can also be infinite)\nadd!(vert_earth_model, frequencies, 150, 12, 1, t=Inf)\nprintln(length(vert_earth_model.layers)) # Output: 3\n\n# Attempt to add a third infinite layer (invalid case)\ntry\n\tadd!(vert_earth_model, frequencies, 120, 12, 1, t=Inf)\ncatch e\n\tprintln(e) # Error: Cannot add consecutive vertical layers with infinite thickness.\nend\n\n# Fix: Set a finite thickness to the currently rightmost layer\nvert_earth_model.layers[end].t = 3\n\n# Add the third layer with infinite thickness now\nadd!(vert_earth_model, frequencies, 120, 12, 1, t=Inf)\nprintln(length(vert_earth_model.layers)) # Output: 4\n\nSee also\n\nEarthLayer\n\n\n\n\n\n","category":"method"},{"location":"reference/","page":"Toolbox reference","title":"Toolbox reference","text":"","category":"page"},{"location":"reference/#Import-and-export","page":"Toolbox reference","title":"Import & export","text":"","category":"section"},{"location":"reference/#LineCableModels.ImportExport","page":"Toolbox reference","title":"LineCableModels.ImportExport","text":"LineCableModels.ImportExport\n\nThe ImportExport module provides methods for serializing and deserializing data structures in LineCableModels.jl, and data exchange with external programs.\n\nOverview\n\nThis module provides functionality for:\n\nSaving and loading cable designs and material libraries to/from JSON and other formats.\nExporting cable system models to PSCAD format.\nSerializing custom types with special handling for measurements and complex numbers.\n\nThe module implements a generic serialization framework with automatic type reconstruction and proper handling of Julia-specific types like Measurement objects and Inf/NaN values.\n\nDependencies\n\nBase\nCore\nDates\nDocStringExtensions\nEzXML\nForceImport\nJSON3\nLineCableModels\nLineCableModels.DataModel\nLineCableModels.EarthProps\nLineCableModels.Materials\nLineCableModels.Utils\nMeasurements\nReexport\nSerialization\n\nExports\n\ndelete!\nexport_data\nget\nload!\nsave\n\n\n\n\n\n","category":"module"},{"location":"reference/#LineCableModels.export_data-Tuple{Val{:pscad}, LineCableSystem, EarthModel}","page":"Toolbox reference","title":"LineCableModels.export_data","text":"export_data(\n    ::Val{:pscad},\n    cable_system::LineCableSystem,\n    earth_props::EarthModel;\n    base_freq,\n    file_name\n) -> Union{Nothing, String}\n\n\nExports a LineCableSystem to a PSCAD-compatible file format.\n\nArguments\n\ncable_system: A LineCableSystem object representing the cable system to be exported.\nearth_props: An EarthModel object containing the earth properties.\nbase_freq: The base frequency [Hz] used for the PSCAD export.\nfile_name: The path to the output file (default: \"*_export.pscx\")\n\nReturns\n\nThe absolute path of the saved file, or nothing on failure.\n\nExamples\n\ncable_system = LineCableSystem(...)\nearth_model = EarthModel(...)\nexport_data(cable_system, earth_model, base_freq=50)\n\nSee also\n\nLineCableSystem\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.load!-Tuple{CablesLibrary}","page":"Toolbox reference","title":"LineCableModels.load!","text":"load!(library::CablesLibrary; file_name) -> CablesLibrary\n\n\nLoads cable designs from a file into an existing CablesLibrary object. Modifies the library in-place. The format is determined by the file extension:\n\n.json: Loads using the custom JSON deserialization and reconstruction.\n.jls: Loads using Julia's native binary deserialization.\n\nArguments\n\nlibrary: The CablesLibrary instance to populate (modified in-place).\nfile_name: Path to the file to load (default: \"cables_library.json\").\n\nReturns\n\nThe modified CablesLibrary instance.\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.load!-Tuple{MaterialsLibrary}","page":"Toolbox reference","title":"LineCableModels.load!","text":"load!(\n    library::MaterialsLibrary;\n    file_name\n) -> MaterialsLibrary\n\n\nLoads materials from a JSON file into an existing MaterialsLibrary object. Modifies the library in-place.\n\nArguments\n\nlibrary: The MaterialsLibrary instance to populate (modified in-place).\nfile_name: Path to the JSON file to load (default: \"materials_library.json\").\n\nReturns\n\nThe modified MaterialsLibrary instance.\n\nSee also\n\nMaterialsLibrary\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.save-Tuple{CablesLibrary}","page":"Toolbox reference","title":"LineCableModels.save","text":"save(\n    library::CablesLibrary;\n    file_name\n) -> Union{Nothing, String}\n\n\nSaves a CablesLibrary to a file. The format is determined by the file extension:\n\n.json: Saves using the custom JSON serialization.\n.jls: Saves using Julia native binary serialization.\n\nArguments\n\nlibrary: The CablesLibrary instance to save.\nfile_name: The path to the output file (default: \"cables_library.json\").\n\nReturns\n\nThe absolute path of the saved file, or nothing on failure.\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.save-Tuple{MaterialsLibrary}","page":"Toolbox reference","title":"LineCableModels.save","text":"save(\n    library::MaterialsLibrary;\n    file_name\n) -> Union{Nothing, String}\n\n\nSaves a MaterialsLibrary to a JSON file.\n\nArguments\n\nlibrary: The MaterialsLibrary instance to save.\nfile_name: The path to the output JSON file (default: \"materials_library.json\").\n\nReturns\n\nThe absolute path of the saved file, or nothing on failure.\n\n\n\n\n\n","category":"method"},{"location":"reference/","page":"Toolbox reference","title":"Toolbox reference","text":"","category":"page"},{"location":"reference/#Materials-library","page":"Toolbox reference","title":"Materials library","text":"","category":"section"},{"location":"reference/#LineCableModels.Materials","page":"Toolbox reference","title":"LineCableModels.Materials","text":"LineCableModels.Materials\n\nThe Materials module provides functionality for managing and utilizing material properties within the LineCableModels.jl package. This module includes definitions for material properties, a library for storing and retrieving materials, and functions for manipulating material data.\n\nOverview\n\nDefines the Material struct representing fundamental physical properties of materials.\nProvides the MaterialsLibrary mutable struct for storing a collection of materials.\nIncludes functions for adding, removing, and retrieving materials from the library.\nSupports loading and saving material data from/to JSON files.\nContains utility functions for displaying material data.\n\nDependencies\n\nBase\nCore\nDataFrames\nDocStringExtensions\nForceImport\nLineCableModels\nLineCableModels.Utils\nMeasurements\nReexport\n\nExports\n\nDataFrame\nMaterial\nMaterialsLibrary\nadd!\ndelete!\nget\ngetindex\nhaskey\niterate\nkeys\nlength\nsetindex!\nvalues\n\n\n\n\n\n","category":"module"},{"location":"reference/#DataFrames.DataFrame-Tuple{MaterialsLibrary}","page":"Toolbox reference","title":"DataFrames.DataFrame","text":"DataFrame(library::MaterialsLibrary) -> DataFrame\n\n\nLists the contents of a MaterialsLibrary as a DataFrame.\n\nArguments\n\nlibrary: Instance of MaterialsLibrary to be displayed.\n\nReturns\n\nA DataFrame containing the material properties.\n\nExamples\n\nlibrary = MaterialsLibrary()\ndf = DataFrame(library)\n\nSee also\n\nLineCableModels.ImportExport.save\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.Materials.Material","page":"Toolbox reference","title":"LineCableModels.Materials.Material","text":"struct Material{T<:Union{Float64, Measurements.Measurement{Float64}}}\n\nDefines electromagnetic and thermal properties of a material used in cable modeling:\n\nrho::Union{Float64, Measurements.Measurement{Float64}}: Electrical resistivity of the material [Ω·m].\neps_r::Union{Float64, Measurements.Measurement{Float64}}: Relative permittivity [dimensionless].\nmu_r::Union{Float64, Measurements.Measurement{Float64}}: Relative permeability [dimensionless].\nT0::Union{Float64, Measurements.Measurement{Float64}}: Reference temperature for property evaluations [°C].\nalpha::Union{Float64, Measurements.Measurement{Float64}}: Temperature coefficient of resistivity [1/°C].\n\n\n\n\n\n","category":"type"},{"location":"reference/#LineCableModels.Materials.MaterialsLibrary","page":"Toolbox reference","title":"LineCableModels.Materials.MaterialsLibrary","text":"mutable struct MaterialsLibrary <: AbstractDict{String, Material}\n\nStores a collection of predefined materials for cable modeling, indexed by material name:\n\ndata::Dict{String, Material}: Dictionary mapping material names to Material objects.\n\n\n\n\n\n","category":"type"},{"location":"reference/#LineCableModels.Materials.MaterialsLibrary-Tuple{}","page":"Toolbox reference","title":"LineCableModels.Materials.MaterialsLibrary","text":"MaterialsLibrary(; add_defaults) -> MaterialsLibrary\n\n\nConstructs an empty MaterialsLibrary instance and initializes with default materials.\n\nArguments\n\nNone.\n\nReturns\n\nA MaterialsLibrary object populated with default materials.\n\nExamples\n\n# Create a new, empty library\nlibrary = MaterialsLibrary()\n\nSee also\n\nMaterial\n_add_default_materials!\n\n\n\n\n\n","category":"method"},{"location":"reference/#Base.delete!-Tuple{MaterialsLibrary, String}","page":"Toolbox reference","title":"Base.delete!","text":"delete!(library::MaterialsLibrary, name::String)\n\n\nRemoves a material from a MaterialsLibrary.\n\nArguments\n\nlibrary: Instance of MaterialsLibrary from which the material will be removed.\nname: Name of the material to be removed.\n\nReturns\n\nThe modified instance of MaterialsLibrary without the specified material.\n\nErrors\n\nThrows an error if the material does not exist in the library.\n\nExamples\n\nlibrary = MaterialsLibrary()\ndelete!(library, \"copper\")\n\nSee also\n\nadd!\n\n\n\n\n\n","category":"method"},{"location":"reference/#Base.get-2","page":"Toolbox reference","title":"Base.get","text":"get(\n    library::MaterialsLibrary,\n    name::String\n) -> Union{Nothing, Material}\nget(library::MaterialsLibrary, name::String, default) -> Any\n\n\nRetrieves a material from a MaterialsLibrary by name.\n\nArguments\n\nlibrary: Instance of MaterialsLibrary containing the materials.\nname: Name of the material to retrieve.\n\nReturns\n\nThe requested Material if found, otherwise nothing.\n\nExamples\n\nlibrary = MaterialsLibrary()\nmaterial = get(library, \"copper\")\n\nSee also\n\nadd!\ndelete!\n\n\n\n\n\n","category":"function"},{"location":"reference/#LineCableModels.add!-Tuple{MaterialsLibrary, AbstractString, Material}","page":"Toolbox reference","title":"LineCableModels.add!","text":"add!(\n    library::MaterialsLibrary,\n    name::AbstractString,\n    material::Material\n) -> MaterialsLibrary\n\n\nAdds a new material to a MaterialsLibrary.\n\nArguments\n\nlibrary: Instance of MaterialsLibrary where the material will be added.\nname: Name of the material.\nmaterial: Instance of Material containing its properties.\n\nReturns\n\nThe modified instance of MaterialsLibrary with the new material added.\n\nErrors\n\nThrows an error if a material with the same name already exists in the library.\n\nExamples\n\nlibrary = MaterialsLibrary()\nmaterial = Material(1.7241e-8, 1.0, 0.999994, 20.0, 0.00393)\nadd!(library, \"copper\", material)\n\n\n\n\n\n","category":"method"},{"location":"reference/","page":"Toolbox reference","title":"Toolbox reference","text":"","category":"page"},{"location":"reference/#Utilities","page":"Toolbox reference","title":"Utilities","text":"","category":"section"},{"location":"reference/#LineCableModels.Utils","page":"Toolbox reference","title":"LineCableModels.Utils","text":"LineCableModels.Utils\n\nThe Utils module provides utility functions and constants for the  LineCableModels.jl package. This module includes functions for handling measurements, numerical comparisons, and other common tasks.\n\nOverview\n\nProvides general constants used throughout the package.\nIncludes utility functions for numerical comparisons and handling measurements.\nContains functions to compute uncertainties and bounds for measurements.\n\nDependencies\n\nBase\nCore\nDocStringExtensions\nForceImport\nLineCableModels\nMeasurements\nReexport\nStatistics\n\nExports\n\nbias_to_uncertain\nequals\npercent_error\npercent_to_uncertain\nstrip_uncertainty\nto_lower\nto_nominal\nto_upper\n\n\n\n\n\n","category":"module"},{"location":"reference/#LineCableModels.Utils.bias_to_uncertain-Tuple{Float64, Vector{<:Measurements.Measurement}}","page":"Toolbox reference","title":"LineCableModels.Utils.bias_to_uncertain","text":"bias_to_uncertain(\n    nominal::Float64,\n    measurements::Vector{<:Measurements.Measurement}\n) -> Union{Missing, Measurements.Measurement}\n\n\nComputes the uncertainty of a measurement by incorporating systematic bias.\n\nArguments\n\nnominal: The deterministic nominal value (Float64).\nmeasurements: A vector of Measurement values from the Measurements.jl package.\n\nReturns\n\nA new Measurement object representing the mean measurement value with an uncertainty that accounts for both statistical variation and systematic bias.\n\nNotes\n\nComputes the mean value and its associated uncertainty from the given measurements.\nDetermines the bias as the absolute difference between the deterministic nominal value and the mean measurement.\nThe final uncertainty is the sum of the standard uncertainty (sigma_mean) and the systematic bias.\n\nExamples\n\nusing Measurements\n\nnominal = 10.0\nmeasurements = [10.2 ± 0.1, 9.8 ± 0.2, 10.1 ± 0.15]\nresult = bias_to_uncertain(nominal, measurements)\nprintln(result)  # Output: Measurement with adjusted uncertainty\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.Utils.equals-Tuple{Any, Any}","page":"Toolbox reference","title":"LineCableModels.Utils.equals","text":"equals(x, y; atol) -> Any\n\n\nChecks if two numerical values are approximately equal within a given tolerance.\n\nArguments\n\nx: First numeric value.\ny: Second numeric value.\natol: Absolute tolerance for comparison (default: TOL).\n\nReturns\n\ntrue if x and y are approximately equal within the given tolerance.\nfalse otherwise.\n\nExamples\n\nequals(1.00001, 1.0, atol=1e-4) # Output: true\nequals(1.0001, 1.0, atol=1e-5)  # Output: false\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.Utils.percent_error-Tuple{Number}","page":"Toolbox reference","title":"LineCableModels.Utils.percent_error","text":"percent_error(m::Number) -> Any\n\n\nComputes the percentage uncertainty of a measurement.\n\nArguments\n\nm: A numerical value, expected to be of type Measurement from the Measurements.jl package.\n\nReturns\n\nThe percentage uncertainty, computed as 100 * uncertainty(m) / value(m), if m is a Measurement.\nNaN if m is not a Measurement.\n\nExamples\n\nusing Measurements\n\nm = 10.0 ± 2.0\npercent_err = percent_error(m)  # Output: 20.0\n\nnot_a_measurement = 5.0\npercent_err_invalid = percent_error(not_a_measurement)  # Output: NaN\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.Utils.percent_to_uncertain-Tuple{Any, Any}","page":"Toolbox reference","title":"LineCableModels.Utils.percent_to_uncertain","text":"percent_to_uncertain(\n    val,\n    perc\n) -> Union{Missing, Measurements.Measurement}\n\n\nConverts a value to a measurement with uncertainty based on percentage.\n\nArguments\n\nval: The nominal value.\nperc: The percentage uncertainty (0 to 100).\n\nReturns\n\nA Measurement type with the given value and calculated uncertainty.\n\nExamples\n\nusing Measurements\n\npercent_to_uncertain(100.0, 5)  # Output: 100.0 ± 5.0\npercent_to_uncertain(10.0, 10)  # Output: 10.0 ± 1.0\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.Utils.strip_uncertainty-Tuple{Any}","page":"Toolbox reference","title":"LineCableModels.Utils.strip_uncertainty","text":"strip_uncertainty(value) -> Any\n\n\nConverts a measurement to a value with zero uncertainty, retaining the numeric type Measurement.\n\nArguments\n\nvalue: Input value that may be a Measurement type or another type.\n\nReturns\n\nIf input is a Measurement, returns the same value with zero uncertainty; otherwise returns the original value unchanged.\n\nExamples\n\nx = 5.0 ± 0.1\nresult = strip_uncertainty(x)  # Output: 5.0 ± 0.0\n\ny = 10.0\nresult = strip_uncertainty(y)  # Output: 10.0\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.Utils.to_lower-Tuple{Number}","page":"Toolbox reference","title":"LineCableModels.Utils.to_lower","text":"to_lower(m::Number) -> Any\n\n\nComputes the lower bound of a measurement value.\n\nArguments\n\nm: A numerical value, expected to be of type Measurement from the Measurements.jl package.\n\nReturns\n\nThe lower bound, computed as value(m) - uncertainty(m) if m is a Measurement.\nNaN if m is not a Measurement.\n\nExamples\n\nusing Measurements\n\nm = 10.0 ± 2.0\nlower = to_lower(m)  # Output: 8.0\n\nnot_a_measurement = 5.0\nlower_invalid = to_lower(not_a_measurement)  # Output: NaN\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.Utils.to_nominal-Tuple{Any}","page":"Toolbox reference","title":"LineCableModels.Utils.to_nominal","text":"to_nominal(x) -> Any\n\n\nExtracts the nominal value from a measurement or returns the original value.\n\nArguments\n\nx: Input value which can be a Measurement type or any other type.\n\nReturns\n\nThe nominal value if x is a Measurement, otherwise returns x unchanged.\n\nExamples\n\nusing Measurements\n\nto_nominal(1.0)  # Output: 1.0\nto_nominal(5.2 ± 0.3)  # Output: 5.2\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.Utils.to_upper-Tuple{Number}","page":"Toolbox reference","title":"LineCableModels.Utils.to_upper","text":"to_upper(m::Number) -> Any\n\n\nComputes the upper bound of a measurement value.\n\nArguments\n\nm: A numerical value, expected to be of type Measurement from the Measurements.jl package.\n\nReturns\n\nThe upper bound of m, computed as value(m) + uncertainty(m) if m is a Measurement.\nNaN if m is not a Measurement.\n\nExamples\n\nusing Measurements\n\nm = 10.0 ± 2.0\nupper = to_upper(m)  # Output: 12.0\n\nnot_a_measurement = 5.0\nupper_invalid = to_upper(not_a_measurement)  # Output: NaN\n\n\n\n\n\n","category":"method"},{"location":"reference/","page":"Toolbox reference","title":"Toolbox reference","text":"","category":"page"},{"location":"reference/#Private-API","page":"Toolbox reference","title":"Private API","text":"","category":"section"},{"location":"reference/#Data-model-2","page":"Toolbox reference","title":"Data model","text":"","category":"section"},{"location":"reference/#LineCableModels.DataModel.AbstractCablePart","page":"Toolbox reference","title":"LineCableModels.DataModel.AbstractCablePart","text":"abstract type AbstractCablePart\n\nAbstract type representing a generic cable part.\n\n\n\n\n\n","category":"type"},{"location":"reference/#LineCableModels.DataModel.AbstractConductorPart","page":"Toolbox reference","title":"LineCableModels.DataModel.AbstractConductorPart","text":"abstract type AbstractConductorPart <: LineCableModels.DataModel.AbstractCablePart\n\nAbstract type representing a conductive part of a cable.\n\nSubtypes implement specific configurations:\n\nWireArray\nTubular\nStrip\n\n\n\n\n\n","category":"type"},{"location":"reference/#LineCableModels.DataModel.AbstractInsulatorPart","page":"Toolbox reference","title":"LineCableModels.DataModel.AbstractInsulatorPart","text":"abstract type AbstractInsulatorPart <: LineCableModels.DataModel.AbstractCablePart\n\nAbstract type representing an insulating part of a cable.\n\nSubtypes implement specific configurations:\n\nInsulator\nSemicon\n\n\n\n\n\n","category":"type"},{"location":"reference/#Base.show-Tuple{IO, MIME{Symbol(\"text/plain\")}, CableComponent}","page":"Toolbox reference","title":"Base.show","text":"show(\n    io::IO,\n    _::MIME{Symbol(\"text/plain\")},\n    component::CableComponent\n)\n\n\nDefines the display representation of a CableComponent object for REPL or text output.\n\nArguments\n\nio: Output stream.\n::MIME\"text/plain\": MIME type for plain text output.\ncomponent: The CableComponent object to be displayed.\n\nReturns\n\nNothing. Modifies io by writing text representation of the object.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Base.show-Tuple{IO, MIME{Symbol(\"text/plain\")}, CableDesign}","page":"Toolbox reference","title":"Base.show","text":"show(\n    io::IO,\n    _::MIME{Symbol(\"text/plain\")},\n    design::CableDesign\n)\n\n\nDefines the display representation of a CableDesign object for REPL or text output.\n\nArguments\n\nio: Output stream.\n::MIME\"text/plain\": MIME type for plain text output.\ndesign: The CableDesign object to be displayed.\n\nReturns\n\nNothing. Modifies io by writing text representation of the object.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Base.show-Tuple{IO, MIME{Symbol(\"text/plain\")}, Union{ConductorGroup, InsulatorGroup}}","page":"Toolbox reference","title":"Base.show","text":"show(\n    io::IO,\n    _::MIME{Symbol(\"text/plain\")},\n    group::Union{ConductorGroup, InsulatorGroup}\n)\n\n\nDefines the display representation of a ConductorGroup or InsulatorGroupobjects for REPL or text output.\n\nArguments\n\nio: Output stream.\n::MIME\"text/plain\": MIME type for plain text output.\ngroup: The ConductorGroup or InsulatorGroup instance to be displayed.\n\nReturns\n\nNothing. Modifies io by writing text representation of the object.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Base.show-Union{Tuple{T}, Tuple{IO, MIME{Symbol(\"text/plain\")}, T}} where T<:LineCableModels.DataModel.AbstractCablePart","page":"Toolbox reference","title":"Base.show","text":"show(\n    io::IO,\n    _::MIME{Symbol(\"text/plain\")},\n    part::LineCableModels.DataModel.AbstractCablePart\n)\n\n\nDefines the display representation of an AbstractCablePart object for REPL or text output.\n\nArguments\n\nio: Output stream.\n::MIME\"text/plain\": MIME type for plain text output.\npart: The AbstractCablePart instance to be displayed.\n\nReturns\n\nNothing. Modifies io by writing text representation of the object.\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.DataModel._extract_part_properties-Tuple{Any, Any}","page":"Toolbox reference","title":"LineCableModels.DataModel._extract_part_properties","text":"_extract_part_properties(part, properties) -> Any\n\n\nHelper function to extract properties from a part for detailed format.\n\nArguments\n\npart: An instance of AbstractCablePart from which to extract properties.\nproperties: A vector of symbols indicating which properties to extract (not used in the current implementation).\n\nReturns\n\nA vector containing the extracted properties in the following order:\ntype: The lowercase string representation of the part's type.\nradius_in: The inner radius of the part, if it exists, otherwise missing.\nradius_ext: The outer radius of the part, if it exists, otherwise missing.\ndiameter_in: The inner diameter of the part (2 * radiusin), if `radiusinexists, otherwisemissing`.\ndiameter_ext: The outer diameter of the part (2 * radiusext), if `radiusextexists, otherwisemissing`.\nthickness: The difference between radius_ext and radius_in, if both exist, otherwise missing.\ncross_section: The cross-sectional area of the part, if it exists, otherwise missing.\nnum_wires: The number of wires in the part, if it exists, otherwise missing.\nresistance: The resistance of the part, if it exists, otherwise missing.\nalpha: The temperature coefficient of resistivity of the part or its material, if it exists, otherwise missing.\ngmr: The geometric mean radius of the part, if it exists, otherwise missing.\ngmr_ratio: The ratio of gmr to radius_ext, if both exist, otherwise missing.\nshunt_capacitance: The shunt capacitance of the part, if it exists, otherwise missing.\nshunt_conductance: The shunt conductance of the part, if it exists, otherwise missing.\n\nNotes\n\nThis function is used to create a standardized format for displaying detailed information about cable parts.\n\nExamples\n\npart = Conductor(...)\nproperties = [:radius_in, :radius_ext, :resistance]  # Example of properties to extract\nextracted_properties = _extract_part_properties(part, properties)\nprintln(extracted_properties)\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.DataModel._get_material_color-Tuple{Any}","page":"Toolbox reference","title":"LineCableModels.DataModel._get_material_color","text":"_get_material_color(\n    material_props;\n    rho_weight,\n    epsr_weight,\n    mur_weight\n) -> Any\n\n\nGenerates a color representation for a Material based on its physical properties.\n\nArguments\n\nmaterial_props: Dictionary containing material properties:\nrho: Electrical resistivity [Ω·m].\neps_r: Relative permittivity [dimensionless].\nmu_r: Relative permeability [dimensionless].\nrho_weight: Weight assigned to resistivity in color blending (default: 1.0) [dimensionless].\nepsr_weight: Weight assigned to permittivity in color blending (default: 0.1) [dimensionless].\nmur_weight: Weight assigned to permeability in color blending (default: 0.1) [dimensionless].\n\nReturns\n\nAn RGBA object representing the combined color based on the material's properties.\n\nNotes\n\nColors are normalized and weighted using property-specific gradients:\n\nConductors (ρ ≤ 5ρ₀): White → Dark gray\nPoor conductors (5ρ₀ < ρ ≤ 10⁴): Bronze → Greenish-brown\nInsulators (ρ > 10⁴): Greenish-brown → Black\nPermittivity: Gray → Orange\nPermeability: Silver → Purple\nThe overlay function combines colors with their respective alpha/weight values.\n\nExamples\n\nmaterial_props = Dict(\n\t:rho => 1.7241e-8,\n\t:eps_r => 2.3,\n\t:mu_r => 1.0\n)\ncolor = _get_material_color(material_props)\nprintln(color) # Expected output: RGBA(0.9, 0.9, 0.9, 1.0)\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.DataModel._parse_inputs_radius","page":"Toolbox reference","title":"LineCableModels.DataModel._parse_inputs_radius","text":"Parses input values into radius representation based on object type and input type.\n\nArguments\n\nx: Input value that can be a raw number, a Diameter, a Thickness, or other convertible type [m].\nobject_type: Type parameter used for dispatch.\n\nReturns\n\nParsed radius value in appropriate units [m].\n\nExamples\n\nradius = _parse_inputs_radius(10.0, ...)   # Direct radius value\nradius = _parse_inputs_radius(Diameter(20.0), ...)  # From diameter object\nradius = _parse_inputs_radius(Thickness(5.0), ...)  # From thickness object\n\nMethods\n\n_parse_inputs_radius(x, object_type)\n\ndefined at radii.jl:74.\n\n_parse_inputs_radius(d, object_type)\n\ndefined at radii.jl:75.\n\n_parse_inputs_radius(p, object_type)\n\ndefined at radii.jl:76.\n\n_parse_inputs_radius(x, object_type)\n\ndefined at radii.jl:77.\n\n_parse_inputs_radius(p, object_type)\n\ndefined at radii.jl:80.\n\nSee also\n\nDiameter\nThickness\nstrip_uncertainty\n\n\n\n\n\n","category":"function"},{"location":"reference/#LineCableModels.DataModel._print_fields-Tuple{IO, Any, Vector{Symbol}}","page":"Toolbox reference","title":"LineCableModels.DataModel._print_fields","text":"_print_fields(\n    io::IO,\n    obj,\n    fields_to_show::Vector{Symbol};\n    sigdigits\n) -> Int64\n\n\nPrint the specified fields of an object in a compact format.\n\nArguments\n\nio: The output stream.\nobj: The object whose fields will be displayed.\nfields_to_show: Vector of field names (as Symbols) to display.\nsigdigits: Number of significant digits for rounding numeric values.\n\nReturns\n\nNumber of fields that were actually displayed.\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.DataModel._resolve_backend","page":"Toolbox reference","title":"LineCableModels.DataModel._resolve_backend","text":"_resolve_backend(\n\n) -> Union{Plots.GRBackend, Plots.PlotlyJSBackend}\n_resolve_backend(backend) -> Any\n\n\nSelects the appropriate plotting backend based on the environment.\n\nArguments\n\nbackend: Optional explicit backend to use. If provided, this backend will be activated.\n\nReturns\n\nNothing. The function activates the chosen backend.\n\nNotes\n\nAutomatically selects GR for headless environments (CI or no DISPLAY) and PlotlyJS for interactive use when no backend is explicitly specified. This is particularly needed when running within CI environments.\n\nExamples\n\n_resolve_backend()           # Auto-selects based on environment\n_resolve_backend(pyplot)     # Explicitly use PyPlot backend\n\n\n\n\n\n","category":"function"},{"location":"reference/#LineCableModels.DataModel._resolve_radius","page":"Toolbox reference","title":"LineCableModels.DataModel._resolve_radius","text":"_resolve_radius(\n    param_in,\n    param_ext\n) -> Union{Tuple{Number, Any, Real}, Tuple{Number, Number, Any}}\n_resolve_radius(\n    param_in,\n    param_ext,\n    object_type\n) -> Tuple{Number, Any, Any}\n\n\nResolves radius parameters for cable components, converting from various input formats to standardized inner radius, outer radius, and thickness values.\n\nThis function serves as a high-level interface to the radius resolution system. It processes inputs through a two-stage pipeline:\n\nFirst normalizes input parameters to consistent forms using _parse_inputs_radius.\nThen delegates to specialized implementations via _do_resolve_radius based on the component type.\n\nArguments\n\nparam_in: Inner boundary parameter (defaults to radius) [m]. Can be a number, a Diameter , a Thickness, or an AbstractCablePart.\nparam_ext: Outer boundary parameter (defaults to radius) [m]. Can be a number, a Diameter , a Thickness, or an AbstractCablePart.\nobject_type: Type associated to the constructor of the new AbstractCablePart.\n\nReturns\n\nradius_in: Normalized inner radius [m].\nradius_ext: Normalized outer radius [m].\nthickness: Computed thickness or specialized dimension depending on the method [m]. For WireArray components, this value represents the wire radius instead of thickness.\n\nSee also\n\nDiameter\nThickness\nAbstractCablePart\n\n\n\n\n\n","category":"function"},{"location":"reference/#Earth-properties-2","page":"Toolbox reference","title":"Earth properties","text":"","category":"section"},{"location":"reference/#LineCableModels.EarthProps.AbstractFDEMFormulation","page":"Toolbox reference","title":"LineCableModels.EarthProps.AbstractFDEMFormulation","text":"abstract type AbstractFDEMFormulation\n\nAbstract type representing different frequency-dependent earth models (FDEM). Used in the multi-dispatch implementation of _calc_earth_properties.\n\nCurrently available formulations\n\nCPEarth: Constant properties (CP) model.\n\n\n\n\n\n","category":"type"},{"location":"reference/#Base.show-Tuple{IO, MIME{Symbol(\"text/plain\")}, EarthModel}","page":"Toolbox reference","title":"Base.show","text":"show(\n    io::IO,\n    _::MIME{Symbol(\"text/plain\")},\n    model::EarthModel\n)\n\n\nDefines the display representation of a EarthModel object for REPL or text output.\n\nArguments\n\nio: The output stream to write the representation to [IO].\nmime: The MIME type for plain text output [MIME\"text/plain\"].\nmodel: The EarthModel instance to be displayed.\n\nReturns\n\nNothing. Modifies io to format the output.\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.coerce_to_T-Union{Tuple{T}, Tuple{EarthLayer, Type{T}}} where T","page":"Toolbox reference","title":"LineCableModels.coerce_to_T","text":"Convert an EarthLayer{S} to an EarthLayer{T} by coercing its fields.\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.coerce_to_T-Union{Tuple{T}, Tuple{EarthModel, Type{T}}} where T","page":"Toolbox reference","title":"LineCableModels.coerce_to_T","text":"Convert an EarthModel{S} to an EarthModel{T} by reconstructing it with all layers and fields coerced to the new type T.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Materials-library-2","page":"Toolbox reference","title":"Materials library","text":"","category":"section"},{"location":"reference/#Base.show-Tuple{IO, MIME{Symbol(\"text/plain\")}, Dict{String, Material}}","page":"Toolbox reference","title":"Base.show","text":"show(\n    io::IO,\n    _::MIME{Symbol(\"text/plain\")},\n    dict::Dict{String, Material}\n)\n\n\nDefines the display representation of a MaterialsLibrary object for REPL or text output.\n\nArguments\n\nio: Output stream.\n::MIME\"text/plain\": MIME type for plain text output.\ndict: The MaterialsLibrary contents to be displayed.\n\nReturns\n\nNothing. Modifies io by writing text representation of the library.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Base.show-Tuple{IO, MIME{Symbol(\"text/plain\")}, MaterialsLibrary}","page":"Toolbox reference","title":"Base.show","text":"show(\n    io::IO,\n    _::MIME{Symbol(\"text/plain\")},\n    library::MaterialsLibrary\n)\n\n\nDefines the display representation of a MaterialsLibrary object for REPL or text output.\n\nArguments\n\nio: Output stream.\n::MIME\"text/plain\": MIME type for plain text output.\nlibrary: The MaterialsLibrary instance to be displayed.\n\nReturns\n\nNothing. Modifies io by writing text representation of the library.\n\n\n\n\n\n","category":"method"},{"location":"reference/#Base.show-Tuple{IO, MIME{Symbol(\"text/plain\")}, Material}","page":"Toolbox reference","title":"Base.show","text":"show(\n    io::IO,\n    _::MIME{Symbol(\"text/plain\")},\n    material::Material\n)\n\n\nDefines the display representation of a Material object for REPL or text output.\n\nArguments\n\nio: Output stream.\n::MIME\"text/plain\": MIME type for plain text output.\nmaterial: The Material instance to be displayed.\n\nReturns\n\nNothing. Modifies io by writing text representation of the material.\n\n\n\n\n\n","category":"method"},{"location":"reference/#LineCableModels.Materials._add_default_materials!-Tuple{MaterialsLibrary}","page":"Toolbox reference","title":"LineCableModels.Materials._add_default_materials!","text":"_add_default_materials!(\n    library::MaterialsLibrary\n) -> MaterialsLibrary\n\n\nPopulates a MaterialsLibrary with commonly used materials, assigning predefined electrical and thermal properties.\n\nArguments\n\nlibrary: Instance of MaterialsLibrary to be populated.\n\nReturns\n\nThe modified instance of MaterialsLibrary containing the predefined materials.\n\nExamples\n\nlibrary = MaterialsLibrary()\n_add_default_materials!(library)\n\nSee also\n\nadd!\n\n\n\n\n\n","category":"method"},{"location":"reference/#Utilities-2","page":"Toolbox reference","title":"Utilities","text":"","category":"section"},{"location":"reference/","page":"Toolbox reference","title":"Toolbox reference","text":"","category":"page"},{"location":"reference/#Index","page":"Toolbox reference","title":"Index","text":"","category":"section"},{"location":"reference/","page":"Toolbox reference","title":"Toolbox reference","text":"Pages   = [\"reference.md\"]\nOrder   = [:module, :constant, :type, :function, :macro]","category":"page"},{"location":"tutorials/tutorial2/#Tutorial-2-Building-a-cable-design","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"","category":"section"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"This tutorial demonstrates how to model a typical medium-voltage single-core power cable using the LineCableModels.jl package. The objective is to build a complete representation of a single-core 18/30 kV cable with a 1000 mm² aluminum conductor and 35 mm² copper screen.","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"Tutorial outline","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"Pages = [\n\t\"tutorial2.md\",\n]\nDepth = 2:3","category":"page"},{"location":"tutorials/tutorial2/#Introduction","page":"Tutorial 2 - Building a cable design","title":"Introduction","text":"","category":"section"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"Single-core power cables have a complex structure consisting of multiple concentric layers, each with specific geometric and material properties – for example, a cable of type NA2XS(FL)2Y 18/30 is shown here. Prior to building actual transmission line models that incorporate cables as part of the transmission system, e.g. for EMT simulations, power flow, harmonics, protection studies etc., it is necessary to determine the base (or DC) electrical parameters of the cable itself.","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"This tutorial covers:","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"Creating a detailed CableDesign with all its components.\nExamining the main electrical parameters (R, L, C) of the cable core ConductorGroup and main InsulatorGroup.\nExamining the equivalent electromagnetic properties of every CableComponent (core, sheath, jacket).\nSaving the cable design to a CablesLibrary for future use.\nAssigning CableDesign objects to a LineCableSystem and exporting the model to PSCAD for EMT analysis.","category":"page"},{"location":"tutorials/tutorial2/#Getting-started","page":"Tutorial 2 - Building a cable design","title":"Getting started","text":"","category":"section"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"Load the package and set up the environment:","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"using DataFrames\nusing LineCableModels\nfullfile(filename) = joinpath(@__DIR__, filename); #hide\nsetup_logging!(0); #hide\nnothing #hide","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"Initialize materials library with default values:","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"materials = MaterialsLibrary(add_defaults=true)\nmaterials_df = DataFrame(materials)","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"# Alternatively, it can be loaded from the example file built in the previous tutorial:\nload!(materials, file_name = \"materials_library.json\")","category":"page"},{"location":"tutorials/tutorial2/#Cable-dimensions","page":"Tutorial 2 - Building a cable design","title":"Cable dimensions","text":"","category":"section"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"The cable under consideration is a medium-voltage, stranded aluminum conductor cable with XLPE insulation, copper wire concentric screens, water-blocking tape, and PE jacket that is rated for 18/30 kV systems. This information is typically found in the cable datasheet and is fully described in the code type under standards HD 620 10C [10] or DIN VDE 0276-620 [11]:","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"NA2XS(FL)2Y\n-----------\n│ │   │  │\n│ │   │  └── 2Y: Outer sheath of polyethylene (PE)\n│ │   └── (FL): Longitudinal watertight protection\n│ │\n│ └── 2XS: XLPE insulation with screen of copper wires\n└── NA: Aluminum conductor","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"After some research, it is found that a typical cable of this type has the following configuration:","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"num_co_wires = 61  # number of core wires\nnum_sc_wires = 49  # number of screen wires\nd_core = 38.1e-3   # nominal core overall diameter\nd_w = 4.7e-3       # nominal strand diameter of the core\nt_sc_in = 0.6e-3   # nominal internal semicon thickness\nt_ins = 8e-3       # nominal main insulation thickness\nt_sc_out = 0.3e-3  # nominal external semicon thickness\nd_ws = .95e-3      # nominal wire screen diameter\nt_cut = 0.1e-3     # nominal thickness of the copper tape (around wire screens)\nw_cut = 10e-3      # nominal width of copper tape\nt_wbt = .3e-3      # nominal thickness of the water blocking tape\nt_sct = .3e-3      # nominal thickness of the semiconductive tape\nt_alt = .15e-3     # nominal thickness of the aluminum tape\nt_pet = .05e-3     # nominal thickness of the pe face in the aluminum tape\nt_jac = 2.4e-3     # nominal PE jacket thickness\n\nd_overall = d_core #hide\nlayers = [] #hide\npush!(layers, (\"Conductor\", missing, d_overall * 1000)) #hide\nd_overall += 2 * t_sct #hide\npush!(layers, (\"Inner semiconductive tape\", t_sct * 1000, d_overall * 1000)) #hide\nd_overall += 2 * t_sc_in #hide\npush!(layers, (\"Inner semiconductor\", t_sc_in * 1000, d_overall * 1000)) #hide\nd_overall += 2 * t_ins #hide\npush!(layers, (\"Main insulation\", t_ins * 1000, d_overall * 1000)) #hide\nd_overall += 2 * t_sc_out #hide\npush!(layers, (\"Outer semiconductor\", t_sc_out * 1000, d_overall * 1000)) #hide\nd_overall += 2 * t_sct #hide\npush!(layers, (\"Outer semiconductive tape\", t_sct * 1000, d_overall * 1000)) #hide\nd_overall += 2 * d_ws #hide\npush!(layers, (\"Wire screen\", d_ws * 1000, d_overall * 1000)) #hide\nd_overall += 2 * t_cut #hide\npush!(layers, (\"Copper tape\", t_cut * 1000, d_overall * 1000)) #hide\nd_overall += 2 * t_wbt #hide\npush!(layers, (\"Water-blocking tape\", t_wbt * 1000, d_overall * 1000)) #hide\nd_overall += 2 * t_alt #hide\npush!(layers, (\"Aluminum tape\", t_alt * 1000, d_overall * 1000)) #hide\nd_overall += 2 * t_pet #hide\npush!(layers, (\"PE with aluminum face\", t_pet * 1000, d_overall * 1000)) #hide\nd_overall += 2 * t_jac #hide\npush!(layers, (\"PE jacket\", t_jac * 1000, d_overall * 1000)); #hide\nnothing #hide","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"The cable structure is summarized in a table for better visualization, with dimensions in milimiters:","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"df = DataFrame( #hide\n    layer=first.(layers), #hide\n    thickness=[ #hide\n        ismissing(t) ? \"-\" : round(t, sigdigits=2) for t in getindex.(layers, 2) #hide\n    ], #hide\n    diameter=[round(d, digits=2) for d in getindex.(layers, 3)], #hide\n) #hide","category":"page"},{"location":"tutorials/tutorial2/#Using-the-cable-constructors","page":"Tutorial 2 - Building a cable design","title":"Using the cable constructors","text":"","category":"section"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"note: Object hierarchy\nThe LineCableModels.DataModel module implements a carefully designed component hierarchy that mirrors the physical construction of power cables while maintaining the mathematical relationships required for accurate electrical modeling.","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"CableDesign\n├── CableComponent\n│   ├── conductor_group::ConductorGroup <: AbstractConductorPart\n│   │   ├── conductor_props::Material\n│   │   └── layers::Vector{AbstractConductorPart}\n│   │       ├── WireArray\n│   │       ├── Tubular\n│   │       ├── Strip\n│   │       └── …\n│   └── insulator_group::InsulatorGroup <: AbstractInsulatorPart\n│       ├── insulator_props::Material\n│       └── layers::Vector{AbstractInsulatorPart}\n│           ├── Insulator\n│           ├── Semicon\n│           └── …\n⋮\n├── CableComponent\n│   ├── …\n⋮   ⋮","category":"page"},{"location":"tutorials/tutorial2/#Cable-designs","page":"Tutorial 2 - Building a cable design","title":"Cable designs","text":"","category":"section"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"The CableDesign object is the main container for all cable components. It encapsulates the entire cable structure and provides methods for calculating global cable properties.","category":"page"},{"location":"tutorials/tutorial2/#Cable-components","page":"Tutorial 2 - Building a cable design","title":"Cable components","text":"","category":"section"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"Each CableComponent represents a functional group of the cable (core, sheath, armor, outer), organized into a conductor group and an insulator group with their respective effective material properties. This structure is designed to provide precise calculation of electromagnetic parameters.","category":"page"},{"location":"tutorials/tutorial2/#Conductor-groups","page":"Tutorial 2 - Building a cable design","title":"Conductor groups","text":"","category":"section"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"The ConductorGroup object serves as a specialized container for organizing AbstractConductorPart elements in layers. It calculates equivalent resistance (R) and inductance (L) values for all contained conductive elements, handling the complexity of different geometrical arrangements.","category":"page"},{"location":"tutorials/tutorial2/#AbstractConductorPart-implementations","page":"Tutorial 2 - Building a cable design","title":"AbstractConductorPart implementations","text":"","category":"section"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"The WireArray object models stranded cores and screens with helical patterns and circular cross-sections.\nThe Tubular object represents simple tubular conductors with straightforward parameter calculations.\nThe Strip object models conductor tapes following helical patterns with rectangular cross-sections.","category":"page"},{"location":"tutorials/tutorial2/#Insulator-groups","page":"Tutorial 2 - Building a cable design","title":"Insulator groups","text":"","category":"section"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"The InsulatorGroup object organizes AbstractInsulatorPart elements in concentric layers, calculating the equivalent capacitance (C) and conductance (G) parameters.","category":"page"},{"location":"tutorials/tutorial2/#AbstractInsulatorPart-implementations","page":"Tutorial 2 - Building a cable design","title":"AbstractInsulatorPart implementations","text":"","category":"section"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"The Insulator object represents dielectric layers with very high resistivity.\nThe Semicon object models semiconducting layers with intermediate resistivity and high permittivity.","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"note: Equivalent circuit parameters\nThe  hierarchical structure enables accurate calculation of equivalent circuit parameters by:Computing geometry-specific parameters at the AbstractConductorPart and AbstractInsulatorPart levels.\nAggregating these into equivalent parameters within ConductorGroup and InsulatorGroup.\nConverting the composite structure into an equivalent coaxial model by matching lumped circuit quantities (R, L, C, G) to effective electromagnetic properties (ρ, ε, µ) at the CableComponent level. The effective properties are stored in dedicated Material objects.","category":"page"},{"location":"tutorials/tutorial2/#Core-and-main-insulation","page":"Tutorial 2 - Building a cable design","title":"Core and main insulation","text":"","category":"section"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"The core consists of a 4-layer AAAC stranded conductor with 61 wires arranged in (1/6/12/18/24) pattern, with respective lay ratios of (15/13.5/12.5/11) [12]. Stranded conductors are modeled using the WireArray object, which handles the helical pattern and twisting effects via the calc_helical_params method.","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"Initialize the conductor object and assign the central wire:","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"material = get(materials, \"aluminum\")\ncore = ConductorGroup(WireArray(0.0, Diameter(d_w), 1, 0.0, material))","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"tip: Convenience methods\nThe add! method internally passes the radius_ext of the existing object to the radius_in argument of the new conductor. This enables easy stacking of multiple layers without redundancy. Moreover, the Diameter method is a convenience function that converts the diameter to radius at the constructor level. This maintains alignment with manufacturer specifications while enabling internal calculations to use radius values directly. This approach eliminates repetitive unit conversions and potential sources of implementation error.","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"Add the subsequent layers of wires and inspect the object:","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"add!(core, WireArray, Diameter(d_w), 6, 15.0, material)\nadd!(core, WireArray, Diameter(d_w), 12, 13.5, material)\nadd!(core, WireArray, Diameter(d_w), 18, 12.5, material)\nadd!(core, WireArray, Diameter(d_w), 24, 11.0, material)","category":"page"},{"location":"tutorials/tutorial2/#Inner-semiconductor","page":"Tutorial 2 - Building a cable design","title":"Inner semiconductor","text":"","category":"section"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"The inner semiconductor layer ensures uniform electric field distribution between the conductor and insulation, eliminating air gaps and reducing field concentrations. An optional semiconductive tape is often used to ensure core uniformity and enhanced adherence.","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"tip: Convenience methods\nThe Thickness type is a convenience wrapper that simplifies layer construction. When used in a constructor, it automatically calculates the outer radius by adding the thickness to the inner radius (which is inherited from the previous layer's outer radius).","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"Inner semiconductive tape:","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"material = get(materials, \"polyacrylate\")\nmain_insu = InsulatorGroup(Semicon(core, Thickness(t_sct), material))","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"Inner semiconductor (1000 Ω.m as per IEC 840):","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"material = get(materials, \"semicon1\")\nadd!(main_insu, Semicon, Thickness(t_sc_in), material)","category":"page"},{"location":"tutorials/tutorial2/#Main-insulation","page":"Tutorial 2 - Building a cable design","title":"Main insulation","text":"","category":"section"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"XLPE (cross-linked polyethylene) is the standard insulation material for modern medium and high voltage cables due to its excellent dielectric properties.","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"Add the insulation layer:","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"material = get(materials, \"pe\")\nadd!(main_insu, Insulator, Thickness(t_ins), material)","category":"page"},{"location":"tutorials/tutorial2/#Outer-semiconductor","page":"Tutorial 2 - Building a cable design","title":"Outer semiconductor","text":"","category":"section"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"Similar to the inner semiconductor, the outer semiconductor provides a uniform transition from insulation to the metallic screen.","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"Outer semiconductor (500 Ω.m as per IEC 840):","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"material = get(materials, \"semicon2\")\nadd!(main_insu, Semicon, Thickness(t_sc_out), material)","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"Outer semiconductive tape:","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"material = get(materials, \"polyacrylate\")\nadd!(main_insu, Semicon, Thickness(t_sct), material)","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"Group core-related components:","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"core_cc = CableComponent(\"core\", core, main_insu)","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"With the core parts properly defined, the CableDesign object is initialized with nominal data from the datasheet. This includes voltage ratings and reference electrical parameters that will be used to benchmark the design.","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"Define the nominal values and instantiate the CableDesign with the core_cc component:","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"cable_id = \"18kV_1000mm2\"\ndatasheet_info = NominalData(\n    designation_code=\"NA2XS(FL)2Y\",\n    U0=18.0,                        # Phase-to-ground voltage [kV]\n    U=30.0,                         # Phase-to-phase voltage [kV]\n    conductor_cross_section=1000.0, # [mm²]\n    screen_cross_section=35.0,      # [mm²]\n    resistance=0.0291,              # DC resistance [Ω/km]\n    capacitance=0.39,               # Capacitance [μF/km]\n    inductance=0.3,                 # Inductance in trifoil [mH/km]\n)\ncable_design = CableDesign(cable_id, core_cc, nominal_data=datasheet_info)","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"At this point, it becomes possible to preview the cable design:","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"plt1 = preview(cable_design)","category":"page"},{"location":"tutorials/tutorial2/#Wire-screens","page":"Tutorial 2 - Building a cable design","title":"Wire screens","text":"","category":"section"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"The metallic screen (typically copper) serves multiple purposes:","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"Provides a return path for fault currents.\nEnsures radial symmetry of the electric field.\nActs as electrical shielding.\nProvides mechanical protection.","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"Build the wire screens on top of the previous layer:","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"lay_ratio = 10.0 # typical value for wire screens\nmaterial = get(materials, \"copper\")\nscreen_con =\n    ConductorGroup(WireArray(main_insu, Diameter(d_ws), num_sc_wires, lay_ratio, material))","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"Add the equalizing copper tape wrapping the wire screen:","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"add!(screen_con, Strip, Thickness(t_cut), w_cut, lay_ratio, material)","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"Water blocking tape over screen:","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"material = get(materials, \"polyacrylate\")\nscreen_insu = InsulatorGroup(Semicon(screen_con, Thickness(t_wbt), material))","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"Group sheath components and assign to design:","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"sheath_cc = CableComponent(\"sheath\", screen_con, screen_insu)\nadd!(cable_design, sheath_cc)","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"Examine the newly added components:","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"plt2 = preview(cable_design)","category":"page"},{"location":"tutorials/tutorial2/#Outer-jacket-components","page":"Tutorial 2 - Building a cable design","title":"Outer jacket components","text":"","category":"section"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"Modern cables often include an aluminum tape as moisture barrier and PE (polyethylene) outer jacket for mechanical protection.","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"Add the aluminum foil (moisture barrier):","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"material = get(materials, \"aluminum\")\njacket_con = ConductorGroup(Tubular(screen_insu, Thickness(t_alt), material))","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"PE layer after aluminum foil:","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"material = get(materials, \"pe\")\njacket_insu = InsulatorGroup(Insulator(jacket_con, Thickness(t_pet), material))","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"PE jacket (outer mechanical protection):","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"material = get(materials, \"pe\")\nadd!(jacket_insu, Insulator, Thickness(t_jac), material)","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"tip: Convenience methods\nTo facilitate data entry, it is possible to call the add! method directly on the ConductorGroup and InsulatorGroup constituents of the component to include, without instantiating the CableComponent first.","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"Assign the jacket parts directly to the design:","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"add!(cable_design, \"jacket\", jacket_con, jacket_insu)","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"Inspect the finished cable design:","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"plt3 = preview(cable_design)","category":"page"},{"location":"tutorials/tutorial2/#Examining-the-cable-parameters-(RLC)","page":"Tutorial 2 - Building a cable design","title":"Examining the cable parameters (RLC)","text":"","category":"section"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"In this section, the cable design is examined and the calculated parameters are compared with datasheet values. LineCableModels.jl provides methods to analyze the design in different levels of detail.","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"Compare with datasheet information (R, L, C values):","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"core_df = DataFrame(cable_design, :baseparams)","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"Obtain the equivalent electromagnetic properties of the cable:","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"components_df = DataFrame(cable_design, :components)","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"Get detailed description of all cable parts:","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"detailed_df = DataFrame(cable_design, :detailed)","category":"page"},{"location":"tutorials/tutorial2/#Saving-the-cable-design","page":"Tutorial 2 - Building a cable design","title":"Saving the cable design","text":"","category":"section"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"note: Cables library\nDesigns can be saved to a library for future use. The CablesLibrary is a container for storing multiple cable designs, allowing for easy access and reuse in different projects.  Library management is performed using the DataFrame, add!, and save functions.","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"Store the cable design and inspect the library contents:","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"library = CablesLibrary()\nadd!(library, cable_design)\nlibrary_df = DataFrame(library)","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"Save to file for later use:","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"output_file = fullfile(\"cables_library.json\")\nsave(library, file_name=output_file);\nnothing #hide","category":"page"},{"location":"tutorials/tutorial2/#Defining-a-cable-system","page":"Tutorial 2 - Building a cable design","title":"Defining a cable system","text":"","category":"section"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"note: Cable systems\nA cable system is a collection of cables with defined positions, length and environmental characteristics. The LineCableSystem object is the main container for all cable systems, and it allows the definition of multiple cables in different configurations (e.g., trifoil, flat etc.). This object is the entry point for all system-related calculations and analyses.","category":"page"},{"location":"tutorials/tutorial2/#Earth-model","page":"Tutorial 2 - Building a cable design","title":"Earth model","text":"","category":"section"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"The earth return path significantly affects cable impedance calculations and needs to be properly modeled. In this tutorial, only a basic model with typical soil properties is defined. This will be further elaborated in the subsequent tutorials.","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"Define a frequency-dependent earth model (1 Hz to 1 MHz):","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"f = 10.0 .^ range(0, stop=6, length=10)  # Frequency range\nearth_params = EarthModel(f, 100.0, 10.0, 1.0)  # 100 Ω·m resistivity, εr=10, μr=1","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"Earth model base (DC) properties:","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"earthmodel_df = DataFrame(earth_params)","category":"page"},{"location":"tutorials/tutorial2/#Three-phase-system-in-trifoil-configuration","page":"Tutorial 2 - Building a cable design","title":"Three-phase system in trifoil configuration","text":"","category":"section"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"This section ilustrates the construction of a cable system with three identical cables arranged in a trifoil formation.","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"Define system center point (underground at 1 m depth) and the trifoil positions","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"x0, y0 = 0.0, -1.0\nxa, ya, xb, yb, xc, yc = trifoil_formation(x0, y0, 0.035);\nnothing #hide","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"Initialize the LineCableSystem with the first cable (phase A):","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"cablepos = CablePosition(cable_design, xa, ya,\n    Dict(\"core\" => 1, \"sheath\" => 0, \"jacket\" => 0))\ncable_system = LineCableSystem(\"18kV_1000mm2_trifoil\", 1000.0, cablepos)","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"Add remaining cables (phases B and C):","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"add!(cable_system, cable_design, xb, yb,\n    Dict(\"core\" => 2, \"sheath\" => 0, \"jacket\" => 0))\nadd!(cable_system, cable_design, xc, yc,\n    Dict(\"core\" => 3, \"sheath\" => 0, \"jacket\" => 0))","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"note: Phase mapping\nThe add! function allows the specification of phase mapping for each cable. The Dict argument maps the cable components to their respective phases, where core is the conductor, sheath is the screen, and jacket is the outer jacket. The values (1, 2, 3) represent the phase numbers (A, B, C) in this case. Components mapped to phase 0 will be Kron-eliminated (grounded). Components set to the same phase will be bundled into an equivalent phase.","category":"page"},{"location":"tutorials/tutorial2/#Cable-system-preview","page":"Tutorial 2 - Building a cable design","title":"Cable system preview","text":"","category":"section"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"In this section the complete three-phase cable system is examined.","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"Display system details:","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"system_df = DataFrame(cable_system)","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"Visualize the cross-section of the three-phase system:","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"plt4 = preview(cable_system, zoom_factor=0.15)","category":"page"},{"location":"tutorials/tutorial2/#PSCAD-export","page":"Tutorial 2 - Building a cable design","title":"PSCAD export","text":"","category":"section"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"The final step showcases how to export the model for electromagnetic transient simulations in PSCAD.","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"Export to PSCAD input file:","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"output_file = fullfile(\"$(cable_system.system_id)_export.pscx\")\nexport_file = export_data(:pscad, cable_system, earth_params, file_name=output_file);\nnothing #hide","category":"page"},{"location":"tutorials/tutorial2/#Conclusion","page":"Tutorial 2 - Building a cable design","title":"Conclusion","text":"","category":"section"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"This tutorial has demonstrated how to:","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"Create a detailed model of a complex power cable with multiple concentric layers.\nCalculate and analyze the cable base parameters (R, L, C).\nDesign a three-phase cable system in trifoil arrangement.\nExport the model for further analysis in specialized software.","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"LineCableModels.jl provides a powerful framework for accurate power cable modeling with a physically meaningful representation of all cable components. This approach ensures that electromagnetic parameters are calculated with high precision. Now you can go ahead and run these cable simulations like a boss!","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"","category":"page"},{"location":"tutorials/tutorial2/","page":"Tutorial 2 - Building a cable design","title":"Tutorial 2 - Building a cable design","text":"🏠 Back to Tutorials","category":"page"},{"location":"bib/#Bibliography","page":"Bibliography","title":"Bibliography","text":"","category":"section"},{"location":"bib/","page":"Bibliography","title":"Bibliography","text":"J.-R. Riba. The Role of AC Resistance of Bare Stranded Conductors for Developing Dynamic Line Rating Approaches. Applied Sciences 14 (2024).\n\n\n\nV. T. Morgan. The Current Distribution, Resistance and Internal Inductance of Linear Power System Conductors—A Review of Explicit Equations. IEEE Transactions on Power Delivery 28, 1252–1262 (2013).\n\n\n\nY. Yang, S. Fortin, J. Ma and F. P. Dawalibi. GMR of Stranded Multizone Conductors. In: The 4th IASTED Asian Conference on Power and Energy Systems (AsiaPES) (2008). Link.\n\n\n\nB. Gustavsen. Panel session on data for modeling system transients insulated cables. In: 2001 IEEE Power Engineering Society Winter Meeting. Conference Proceedings (Cat. No.01CH37194), Vol. 2 (2001); p. 718-723 vol.2.\n\n\n\nU. S. Gudmundsdottir, B. Gustavsen, C. L. Bak and W. Wiechowski. Field Test and Simulation of a 400-kV Cross-Bonded Cable System. IEEE Transactions on Power Delivery 26, 1403–1410 (2011).\n\n\n\nA. Ametani. A General Formulation of Impedance and Admittance of Cables. IEEE Transactions on Power Apparatus and Systems PAS-99, 902–910 (1980).\n\n\n\nT. A. Papadopoulos, D. A. Tsiamitros and G. K. Papagiannis. Impedances and Admittances of Underground Cables for the Homogeneous Earth Case. IEEE Transactions on Power Delivery 25, 961–969 (2010).\n\n\n\nCIGRE Working Group B1.30. Cable Systems Electrical Characteristics. Technical Brochure 531 (CIGRE, Apr 2013). Link.\n\n\n\nIEC technical committee 20: Electric cables. IEC 60287 - Electric cables – Calculation of the current rating (International Electrotechnical Commission, 2023). Link.\n\n\n\nT. C. 20. Distribution cables with extruded insulation for rated voltages from 3.6/6 (7.2) kV up to and including 20.8/36 (42) kV (European Committee for Electrotechnical Standardization, 2023); pp. 1–150. Link.\n\n\n\nT. C. VDE. Distribution cables with extruded insulation for rated voltages from 3.6/6 (7.2) kV up to and including 20.8/36 (42) kV (VDE, 2024); pp. 1–120. Link.\n\n\n\nT. C. 7. Conductors for Overhead Lines—Round Wire Concentric Lay Stranded Conductors (European Committee for Electrotechnical Standardization, 2001); pp. 1–73. Link.\n\n\n\nT. Karmokar and M. Popov. Enhanced Modelling and Parameter Determination of HVDC Cables Using Practice-Oriented Methodology. CIGRE Science and Engineering 2025-February (2025).\n\n\n\nB. Gustavsen, J. Martinez and D. Durbak. Parameter determination for modeling system transients-Part II: Insulated cables. IEEE Transactions on Power Delivery 20, 2045–2050 (2005).\n\n\n\nF. Grover and I. S. America. Inductance Calculations: Working Formulas and Tables. Dover books on engineering and engineering physics (Instrument Society of America, 1981).\n\n\n\nCIGRE Working Group B2.12. Alternating Current (AC) Resistance of Helically Stranded Conductors. Technical Brochure 345 (CIGRE, Apr 2008). Link.\n\n\n\nN. Oussalah, Y. Zebboudj and S. A. Boggs. Partial Discharge Pulse Propagation in Shielded Power Cable and Implications for Detection Sensitivity. IEEE Electrical Insulation Magazine 23, 5–10 (2007).\n\n\n\nE. B. Rosa. The self and mutual-inductances of linear conductors. Vol. 4 no. 2 (National Bureau of Standards, 1908).\n\n\n\n","category":"page"},{"location":"#LineCableModels.jl","page":"Home","title":"LineCableModels.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"LineCableModels.jl is a specialized Julia package designed to compute the electrical parameters of coaxial arbitrarily-layered underground/overhead cables with uncertainty quantification. It focuses on calculating line and cable impedances and admittances in the frequency-domain, accounting for skin effect, insulation properties, and earth-return impedances with frequency-dependent soil models.","category":"page"},{"location":"#Documentation-outline","page":"Home","title":"Documentation outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"index.md\",\n    \"tutorials.md\",\n    \"reference.md\",\n    \"bib.md\",\n]\nDepth = 1","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Calculates all base DC parameters of a given cable design (R, L, C and G), for solid, tubular or stranded cores, semiconductors, screens, armors, sheaths, tapes,  and water-blocking materials, with uncertainty propagation using the Measurements.jl package.\nCorrection factors to account for temperature, stranding and twisting effects on the DC resistance [1], GMR [2] and base inductance of stranded cores and wire screens [3].\nExplicit computation of dielectric losses and effective resistances for insulators and semiconductors [4]. Correction of the magnetic constant of insulation layers to account for the solenoid effect introduced by twisted strands [5].\nComputes phase-domain Z/Y matrices for poliphase systems with any number of conductors per phase, and sequence-domain components for three-phase systems, with uncertainty propagation.\nImproved equivalent tubular representation for EMT simulations and direct export to PSCAD format.\nComputes internal impedances of solid, tubular or coaxial multi-layered single-core (SC) cables, using rigorous [6] or equivalent approximate formulas available in industry-standard EMT software.\nComputes earth-return impedances and admittances of underground conductors in homogeneous soil, based on a rigorous solution of Helmholtz equation on the electric Hertzian vector, valid up to 10 MHz [7].","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Clone the package and add to the Julia environment:","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add https://github.com/Electa-Git/LineCableModels.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"using LineCableModels","category":"page"},{"location":"#License","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The source code is provided under the BSD 3-Clause License.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"<p align=\"left\">Documentation generated using <a target=\"_blank\" href=\"https://github.com/JuliaDocs/Documenter.jl\">Documenter.jl</a> and <a target=\"_blank\" href=\"https://github.com/fredrikekre/Literate.jl\">Literate.jl</a>.</p>","category":"page"}]
}
